#!/bin/bash
#
# -------------------------------------------------------------------------- #
# Copyright 2015-2020, StorPool (storpool.com)                               #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #


set -e

VMID="$1"
VC_POLICY="$2"

LOG_PREFIX="vc"
ONE_HOME="${ONE_HOME:-/var/lib/one}"
DRIVER_PATH="${ONE_HOME}/remotes/hooks/volumecare/"
cd "$DRIVER_PATH"

source "${ONE_HOME}"/remotes/tm/storpool/storpool_common.sh
source "${ONE_HOME}"/remotes/addon-storpoolrc

if boolTrue "DDDEBUG_alterVcPolicy"; then
    parent=$PPID
    splog "$PWD::$0 parent $parent::$(readlink -f /proc/$parent/exe)::$(cat /proc/$parent/cmdline)"
    echo "cd $PWD && $0 $*" >"/tmp/VC_$VMID.sh"
fi

umask -S u=rwx,g=rwx,o= >/dev/null

TEMP_DIR="$(mktemp -d)"
trapAdd "rm -rf '$TEMP_DIR'"

function alterVcPolicy()
{
    local vmId="$1" vmPoolFile="$2" VMID= 

    if [ -z "$vmId" ]; then
        if [ -n "$vmPoolFile" ]; then
            splog "Error! Something wen't wrong!"
            exit 1
        fi
        vmPoolFile="${TEMP_DIR}/vm_pool.xml"
        onevm list -x --extended >"$vmPoolFile"
        ret=$?
        if boolTrue "DDEBUG_alterVcPolicy"; then
            splog "($ret) onevm list $vmPoolFile"
        fi
        if [ $ret -ne 0 ]; then
            splog "Error! Can't get VM list!"
            return 1
        fi
        while read -u 4 VMID; do
            alterVcPolicy "$VMID" "$vmPoolFile"
        done 4< <(cat "$vmPool" | \
            xmlstarlet sel -t -m "/VM_POOL/VM" -v 'ID' -n)
        return 0
    fi

    if boolTrue "DDEBUG_alterVcPolicy"; then
        splog "alterVcPolicy($vmId,$vmPoolFile)"
    fi

    oneVmVolumes "$vmId" "$vmPoolFile"

    if [ -z "$vmDisksMap" ]; then
        if boolTrue "DDEBUG_alterVcPolicy"; then
            splog "alterVcPolicy($vmId,$vmPoolFile) vmDisksMap is empty. Return 0"
        fi
        return 0
    fi

    if [ -n "$VM_DS_ID" ]; then
        oneDatastoreInfo "$VM_DS_ID" "${TEMP_DIR}/datastorePool.xml"
    else
        if boolTrue "DDEBUG_alterVcPolicy"; then
            splog "alterVcPolicy($vmId,$vmPoolFile) VM_DS_ID is empty. Return 0"
        fi
        return 0
    fi

    declare -A vols

    for disk in $vmDisksMap; do
        volume="${disk%:*}"
        vols[$volume]="$volume"
    done

    if boolTrue "DEBUG_alterVcPolicy"; then
        splog "VM $vmId VC_POLICY:$VC_POLICY $vmDisksMap"
    fi

    if [ -z "$volumeListJson" ]; then
        volumeListJson="${TEMP_DIR}/volumeList.json"
        storpoolRetry -j volume list >"$volumeListJson"
    fi

    while read -u 7 l; do
        v="${l%%\;*}"
        vcp="${l##*\;}"
        if [ -n "${vols[$v]}" ]; then
            vcpNew="${VC_POLICY//[[:space:]]/}"
            if [ "$vcpNew" != "$vcp" ]; then
                splog "volume:$v current vc-policy:$vcp new:$vcpNew"
                storpoolRetry volume "$v" tag "vc-policy"="$vcpNew"
            elif boolTrue "DDEBUG_alterVcPolicy"; then
                splog "volume $v current vc-policy:$vcp"
            fi
        fi
    done 7< <(jq -r '.data[]|.name+";"+.tags["vc-policy"]' "$volumeListJson")
    unset vmDisksMap
}

if [ -n "$VMID" ]; then
    alterVcPolicy "$VMID"
else
    # try detecting RAFT_LEADER_IP from opennebula's config
    if [ -z "$RAFT_LEADER_IP" ] && [ -f "${ONE_HOME}/config" ]; then
        #RAFT_LEADER_HOOK=ARGUMENTS=leader vlan11 10.163.1.250,COMMAND=raft/vip.sh
        RAFT_IP="$(awk '$0 ~ /^RAFT_LEADER_HOOK/{print $3}' "${ONE_HOME}/config" | tail -n 1)"
        if [ -n "$RAFT_IP" ]; then
            RAFT_LEADER_IP="${RAFT_IP%%/*}"
            RAFT_LEADER_IP="${RAFT_IP%%,*}"
        fi
    fi
    if [ -n "${RAFT_LEADER_IP#disabled}" ]; then
        tmp="$(ip route get "$RAFT_LEADER_IP" 2>/dev/null | head -n 1)"
        if [ "${tmp:0:5}" == "local" ]; then
            if boolTrue "DDEBUG_alterVcPolicy"; then
                splog "Found leader IP ($RAFT_LEADER_IP)."
            fi
        else
            if boolTrue "DDEBUG_alterVcPolicy"; then
                splog "There is no leader IP found ($RAFT_LEADER_IP). Exit."
            fi
            exit 0
        fi
    fi
    alterVcPolicy
fi

rm -rf "$TEMP_DIR"
trapDel "rm -rf '$TEMP_DIR'"

