#!/bin/bash
#
# -------------------------------------------------------------------------- #
# Copyright 2015-2024, StorPool (storpool.com)                               #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# shellcheck disable=SC2310

set -e

VMID="${1}"

export LOG_PREFIX="vc"
ONE_HOME="${ONE_HOME:-/var/lib/one}"
DRIVER_PATH="${ONE_HOME}/remotes/hooks/volumecare/"
cd "${DRIVER_PATH}"

# shellcheck source=tm/storpool/storpool_common.sh
source "${ONE_HOME:-/var/lib/one}/remotes/tm/storpool/storpool_common.sh"
# shellcheck source=addon-storpoolrc
source "${ONE_HOME:-/var/lib/one}/remotes/addon-storpoolrc"

if boolTrue "DDDEBUG_alterVcPolicy"; then
    parent="${PPID}"
    splog "[DDD] ${PWD}::${0} parent ${parent}::$(readlink -f "/proc/${parent}/exe"||true)::$(cat "/proc/${parent}/cmdline"||true)"
    echo "cd ${PWD} && ${0} $*" >"/tmp/VC_${VMID}.sh"
fi

umask -S u=rwx,g=rwx,o= >/dev/null

TEMP_DIR="$(mktemp -d)"
trapAdd "rm -rf '${TEMP_DIR}'"

volumeListJson="${TEMP_DIR}/volumeList.json"
vmPoolFile="${TEMP_DIR}/vm_pool.xml"
dsPoolFile="${TEMP_DIR}/datastorePool.xml"
processedVolumes="${TEMP_DIR}/VMvolumes.txt"

declare -A DS_SP_API_HTTP_HOST  # DS_SP_API_HTTP_HOST[DATASTORE_ID] -> SP_API_HTTP_HOST
declare -A DS_SP_API_HTTP_PORT  # DS_SP_API_HTTP_PORT[DATASTORE_ID] -> SP_API_HTTP_PORT
declare -A DS_SP_AUTH_TOKEN     # DS_SP_AUTH_TOKEN[DATASTORE_ID] -> SP_AUTH_TOKEN

function update_volume_qc()
{
    local volume="$1" qc="$2" oldqc="$3" msg="$4"

    if [[ "${qc}" != "${oldqc}" ]]; then
        debug_sp_qosclass
        splog "${msg:+${msg} }volume ${volume} current qc:'${oldqc}' new:'${qc}'"
        storpoolRetry volume "${volume}" tag "qc"="${qc}" update
    elif boolTrue "DDEBUG_alterVcPolicy"; then
        splog "[DD] ${msg:+${msg} }volume ${volume} current qc:'${qc}'"
    fi
}

function update_volume_vc_policy()
{
    local volume="$1" vcp="$2" oldvcp="$3" msg="$4"

    if [[ "${vcp}" != "${oldvcp}" ]]; then
        splog "${msg:+${msg} }volume ${volume} current vc-policy:'${oldvcp}' new:'${vcp}'"
        storpoolRetry volume "${volume}" tag "vc-policy"="${vcp}" update
    elif boolTrue "DDEBUG_alterVcPolicy"; then
        splog "${msg:+${msg} }volume ${volume} current vc-policy:'${vcp}'"
    fi
}

function alterVcPolicy()
{
    local vmId="$1"
    local volumeListJsonFile=""

    if [[ -z "${vmId}" ]]; then
        oneCallXml onevm list --extended "${vmPoolFile}"
        if [[ ${ret} -ne 0 ]]; then
            splog "Error! Can't get VM list!"
            return 1
        fi
        while read -r -u "${vmfh}" _vmId; do
            alterVcPolicy "${_vmId}"
        done {vmfh}< <(xmlstarlet sel -t -m "/VM_POOL/VM" -v 'ID' -n "${vmPoolFile}" || true)
        return 0
    fi

    if boolTrue "DDEBUG_alterVcPolicy"; then
        splog "[DD][alterVcPolicy] VM ${vmId} BEGIN"
    fi

    SP_QOSCLASS=""
    oneVmVolumes "${vmId}" "${vmPoolFile}"

    if [[ -z "${vmDisksMap}" ]]; then
        if boolTrue "DDEBUG_alterVcPolicy"; then
            splog "[DD][alterVcPolicy] VM ${vmId} vmDisksMap is empty. Return 0"
        fi
        return 0
    fi

    if [[ -n "${VM_DS_ID}" ]]; then
        oneDatastoreInfo "${VM_DS_ID}" "${dsPoolFile}"
        SYSTEM_DS_SP_QOSCLASS="${DS_SP_QOSCLASS}"
        DS_SP_API_HTTP_HOST["${VM_DS_ID}"]="${SP_API_HTTP_HOST}"
        DS_SP_API_HTTP_PORT["${VM_DS_ID}"]="${SP_API_HTTP_PORT}"
        DS_SP_AUTH_TOKEN["${VM_DS_ID}"]="${SP_AUTH_TOKEN}"
    else
        if boolTrue "DDEBUG_alterVcPolicy"; then
            splog "[DD][alterVcPolicy] VM ${vmId} VM_DS_ID is empty. Return 0"
        fi
        return 0
    fi

    if boolTrue "DDEBUG_alterVcPolicy"; then
        _DBGMSG="[alterVcPolicy] VM ${vmId}"
        _DBGMSG+=" VM_SP_QOSCLASS:${VM_SP_QOSCLASS}"
        _DBGMSG+=" SYSTEM_DS_SP_QOSCLASS:${SYSTEM_DS_SP_QOSCLASS}"
        _DBGMSG+=" DEFAULT_QOSCLASS:${DEFAULT_QOSCLASS}"
        _DBGMSG+=" VM_DS_ID:${VM_DS_ID}"
        _DBGMSG+=" DS_SP_API_HTTP_HOST:${DS_SP_API_HTTP_HOST[${VM_DS_ID}]}"
        _DBGMSG+=" DS_SP_API_HTTP_PORT:${DS_SP_API_HTTP_PORT[${VM_DS_ID}]}"
        _DBGMSG+=" DS_SP_AUTH_TOKEN:${DS_SP_AUTH_TOKEN[${VM_DS_ID}]:+AVAILABLE}"
        splog "[DD]${_DBGMSG}"
    fi

    unset volumesDiskId
    declare -A volumesDiskId  # volumesDiskId[oneName]=DISK_ID
    for disk in ${vmDisksMap}; do
        volume="${disk%:*}"
        volumesDiskId["${volume}"]="${disk#*:}"  # volumesDiskId[oneName]=DISK_ID
    done

    unset volumesQc
    declare -A volumesQc  # volumesQc[oneName]=QosClassName
    for vol in ${vmDisksQcMap}; do
        volumesQc["${vol%%:*}"]="${vol#*:}"  # volumesQc[oneName]=QOSCLASS
    done

    declare -A persistentDisksQc  # persistentDisksQc[oneName]=QOSCLASS
    for vol in ${persistentDisksQcMap}; do
        persistentDisksQc["${vol%%:*}"]="${vol#*:}"  # persistentDisksQc[oneName]=QOSCLASS
    done

    declare -A diskType  # diskType[oneName]=DISK_TYPE
    for vol in ${vmDisksTypeMap}; do
        diskType["${vol%%:*}"]="${vol#*:}"  # diskType[oneName]=DISK_TYPE
    done

#    unset datastoresQc
#    declare -A datastoresQc  # datastoresQc[DATASTORE_ID]=QosClassName
    declare -A volumesDsIds  # volumesDsIds[oneName]=DATASTORE_ID
    for entry in ${vmDisksDsMap}; do
        volume="${entry%%:*}"
        dsId="${entry#*:}"
        if [[ -z "${datastoresQc[${dsId}]}" ]]; then
            oneDatastoreInfo "${dsId}" "${dsPoolFile}"
            datastoresQc["${dsId}"]="${DS_SP_QOSCLASS}"  # datastoresQc[DATASTORE_ID]=DS_SP_QOSCLASS
        fi
        volumesDsIds["${volume}"]="${dsId}"  # volumesDsIds[oneName]=DATASTORE_ID
    done
    if [[ -z "${datastoresQc[${VM_DS_ID}]}" ]]; then
        oneDatastoreInfo "${VM_DS_ID}" "${dsPoolFile}"
        datastoresQc["${VM_DS_ID}"]="${DS_SP_QOSCLASS}"  # datastoresQc[DATASTORE_ID]=DS_SP_QOSCLASS
    fi

    if boolTrue "DEBUG_alterVcPolicy"; then
        splog "[D] VM ${vmId} VC_POLICY:${VC_POLICY} vmDisksMap:${vmDisksMap}"
    fi

    volumeListJsonFile="${volumeListJson}-${SP_API_HTTP_HOST:-0.0.0.0}"
    if [[ ! -f "${volumeListJsonFile}" ]]; then
        storpoolRetry -j volume list >"${volumeListJsonFile}"
    fi

    while read -r -u "${jqfh}" _line; do
        IFS=';' read -r -a spdata <<< "${_line}"
        volume="${spdata[0]}"
        vc_policy="${spdata[1]}"
        tag_qc="${spdata[2]}"
        if [[ -n "${volumesDiskId[${volume}]+found}" ]]; then
            # vc-policy tag update
            vc_policy_new="${VC_POLICY//[[:space:]]/}"
            update_volume_vc_policy "${volume}" "${vc_policy_new}" "${vc_policy}" "VM ${vmId} DISK ${volumesDiskId[${volume}]}"
            # qc tag update
            IMAGE_SP_QOSCLASS="${persistentDisksQc[${volume}]}"
            SYSTEM_DS_SP_QOSCLASS="${datastoresQc[${VM_DS_ID}]}"
            if [[ -n "${volumesDsIds[${volume}]}" ]]; then
                IMAGE_DS_SP_QOSCLASS="${datastoresQc[${volumesDsIds[${volume}]}]}"
            else
                IMAGE_DS_SP_QOSCLASS=""
            fi
            VM_DISK_SP_QOSCLASS="${volumesQc[${volume}]}"
            # shellcheck disable=SC2249
            case "${diskType[${volume}]}" in
                PERS)
                    if [[ -n "${IMAGE_SP_QOSCLASS}" ]]; then
                        IMAGE_DS_SP_QOSCLASS=""
                        SYSTEM_DS_SP_QOSCLASS=""
                        VM_SP_QOSCLASS=""
                    fi
                    ;;
#                NONPERS|CDROM)
#                    if [[ -n "${IMAGE_DS_SP_QOSCLASS}" ]]; then
#                        SYSTEM_DS_SP_QOSCLASS=""
#                    fi
#                    ;;
            esac
            if [[ -n "${VM_DISK_SP_QOSCLASS}" ]]; then      # vm disk qosclass
                tag_qc_new="${VM_DISK_SP_QOSCLASS}"
                used="VM_DISK_SP_QOSCLASS"
            elif [[ -n "${IMAGE_SP_QOSCLASS}" ]]; then      # persistent image qosclass
                tag_qc_new="${IMAGE_SP_QOSCLASS}"
                used="IMAGE_SP_QOSCLASS"
            elif [[ -n "${VM_SP_QOSCLASS}" ]]; then         # vm qosclass
                tag_qc_new="${VM_SP_QOSCLASS}"
                used="VM_SP_QOSCLASS"
            elif [[ -n "${SYSTEM_DS_SP_QOSCLASS}" ]]; then  # system ds qosclass
                tag_qc_new="${SYSTEM_DS_SP_QOSCLASS}"
                used="SYSTEM_DS_SP_QOSCLASS"
            elif [[ -n "${IMAGE_DS_SP_QOSCLASS}" ]]; then   # image ds qosclass
                tag_qc_new="${IMAGE_DS_SP_QOSCLASS}"
                used="IMAGE_DS_SP_QOSCLASS"
            else                                            # default qosclass
                tag_qc_new="${DEFAULT_QOSCLASS}"
                used="DEFAULT_QOSCLASS"
            fi
            update_volume_qc "${volume}" "${tag_qc_new}" "${tag_qc}" "VM ${vmId} DISK ${volumesDiskId[${volume}]} (${used})"
            echo "${volume}" >>"${processedVolumes}"
        fi
    done {jqfh}< <(jq -r '.data[]|.name+";"+.tags["vc-policy"]+";"+.tags["qc"]' "${volumeListJsonFile}" || true)
    unset vmDisksMap
}

function alterImagesQosClass()
{
    declare -A dsQosClass
    volumeListJsonFile=""

    if [[ ! -f "${dsPoolFile}" ]]; then
        oneCallXml oneDatastore list "${dsPoolFile}"
    fi

    while read -r -u "${dsfh}" dsId dsQosClass; do
        dsQosClass["${dsId}"]="${dsQosClass}"
    done {dsfh}< <(xmlstarlet sel -t \
        -m "/DATASTORE_POOL/DATASTORE" \
        -v 'ID' \
        -o ' ' -v "TEMPLATE/SP_QOSCLASS" \
        -n "${dsPoolFile}" || true)

    imagePoolFile="${TEMP_DIR}/imagePool.xml"
    if [[ ! -f ${imagePoolFile} ]]; then
        oneimage list -x >"${imagePoolFile}"
    fi

    declare -A imagesQosClass imagesDsIds
    while read -r -u "${imgfh}" imageline; do
        [[ ${imageline:0:3} == "img" ]] || continue
        IFS=';' read -r -a imgData <<<"${imageline}"
        image_id="${imgData[1]}"
        image_ds_id="${imgData[2]}"
        # persistent="${imgData[3]}"
        imgQosClass="${imgData[4]}"
        imgVms="${imgData[5]}"
        # skip images attached to VMs
        [[ -z ${imgVms} ]] || continue
        volume="${ONE_PX:-one}-img-${image_id}"
        imagesQosClass["${volume}"]="${imgQosClass:-${dsQosClass[${image_ds_id}]:-${DEFAULT_QOSCLASS}}}"
        imagesDsIds["${volume}"]="${image_ds_id}"
    done {imgfh}< <(xmlstarlet sel -t \
        -m "/IMAGE_POOL/IMAGE" \
        -o 'img;' -v 'ID' \
        -o ';' -v "DATASTORE_ID" \
        -o ';' -v PERSISTENT \
        -o ';' -v "TEMPLATE/SP_QOSCLASS" \
        -o ';' -v "VMS/ID" \
        -n "${imagePoolFile}" || true)

    if boolTrue "DDDDEBUG_alterVcPolicy"; then
        splog "[DDDD] alterImagesQosClass() imagesQosClass:${!imagesQosClass[*]}=${imagesQosClass[*]}"
    fi
    for ds_id in "${!DS_SP_API_HTTP_HOST[@]}"; do
        if [[ -n "${DS_SP_AUTH_TOKEN[${ds_id}]}" ]]; then
            export SP_AUTH_TOKEN="${DS_SP_AUTH_TOKEN[${ds_id}]}"
        else
            unset SP_AUTH_TOKEN
        fi
        if [[ -n "${DS_SP_API_HTTP_HOST[${ds_id}]}" ]]; then
            export SP_API_HTTP_HOST="${DS_SP_API_HTTP_HOST[${ds_id}]}"
        else
            unset SP_API_HTTP_HOST
        fi
        if [[ -n "${DS_SP_API_HTTP_PORT[${ds_id}]}" ]]; then
            export SP_API_HTTP_PORT="${DS_SP_API_HTTP_PORT[${ds_id}]}"
        else
            unset SP_API_HTTP_PORT
        fi
        volumeListJsonFile="${volumeListJson}-${SP_API_HTTP_HOST:-0.0.0.0}"
        if [[ ! -f "${volumeListJsonFile}" ]]; then
            storpoolRetry -j volume list >"${volumeListJsonFile}"
        fi
        while read -r -u "${spfh}" line; do
            IFS=';' read -r -a spdata <<< "${line}"
            volume="${spdata[0]}"
            tag_qc="${spdata[1]}"
            if [[ -n "${imagesQosClass[${volume}]+found}" ]]; then
                if grep -Eqe "^${volume}$" "${processedVolumes}" &>/dev/null; then
                    if boolTrue "DDDEBUG_alterVcPolicy"; then
                        splog "[DDD]IMG ${volume##*-} volume ${volume} already processed"
                    fi
                    continue
                fi
                dsId="${imagesDsIds[${volume}]}"
                tag_qc_new="${imagesQosClass[${volume}]}"
                update_volume_qc "${volume}" "${tag_qc_new}" "${tag_qc}" "IMG ${volume##*-}"
            fi
        done {spfh}< <(jq -r '.data[]|.name+";"+.tags["qc"]' "${volumeListJsonFile}" || true)
    done
}


if [[ -n "${VMID}" ]]; then
    alterVcPolicy "${VMID}"
else
    # try detecting RAFT_LEADER_IP from opennebula's config
    if [[ -z "${RAFT_LEADER_IP}" ]] && [[ -f "${ONE_HOME}/config" ]]; then
        #RAFT_LEADER_HOOK=ARGUMENTS=leader vlan11 10.163.1.250,COMMAND=raft/vip.sh
        RAFT_IP="$(awk '$0 ~ /^RAFT_LEADER_HOOK/{print $3}' "${ONE_HOME}/config" | tail -n 1 || true)"
        if [[ -n "${RAFT_IP}" ]]; then
            RAFT_LEADER_IP="${RAFT_IP%%/*}"
            RAFT_LEADER_IP="${RAFT_LEADER_IP%%,*}"
        fi
    fi
    if [[ -n "${RAFT_LEADER_IP#disabled}" ]]; then
        tmp="$(ip route get "${RAFT_LEADER_IP}" 2>/dev/null | head -n 1 || true)"
        if [[ "${tmp:0:5}" == "local" ]]; then
            if boolTrue "DDEBUG_alterVcPolicy"; then
                splog "[DD] Found leader IP (${RAFT_LEADER_IP})."
            fi
        else
            if boolTrue "DDEBUG_alterVcPolicy"; then
                splog "[DD] There is no leader IP found (${RAFT_LEADER_IP}). Exit."
            fi
            exit 0
        fi
    fi
    alterVcPolicy
    alterImagesQosClass
fi

rm -rf "${TEMP_DIR}"
trapDel "rm -rf '${TEMP_DIR}'"
