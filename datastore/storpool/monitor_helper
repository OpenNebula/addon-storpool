#!/usr/bin/perl

# -------------------------------------------------------------------------- #
# Copyright 2015-2020, StorPool (storpool.com)                               #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

use v5.10;
use strict;
use warnings;
use autodie;
use JSON::XS;
use List::Util qw(min max sum);

# use Data::Dumper;


my $AG_SIZE= 512*1024*1024 * (4096+128) / 4096;
my $SAFETY_AGS = 20;
my $ONDISK_TO_PHYS = 1.025; # to account fo fragmentation of entries in allocation groups measured <1.015 on live system
my $STORED_TO_PHYS = 1.100; # to account for checksums and all CoW overhead. measured ~ 1.063 on live system
my $REPLICATION = 3;

sub gigs($)
{
	my ($bytes) = @_;
	return sprintf("%d GiB", $bytes/1024**3);
}

sub storpool_get(@)
{
	my (@a) = @_;
	my $q = join " ", @a;
	
	return decode_json(`storpool -B -j $q`)->{data};
}


my $templates = storpool_get("template list");

my %out = (
	"data" => [],
);

for my $templ (@$templates)
{
	my $pg_tail = $templ->{placeTail};
	my $pg_all = $templ->{placeAll};
	
	my $disks = storpool_get("disk list");

	my @pgs;
	my @repl;
	if ($pg_all eq $pg_tail)
	{
		@pgs = ( $pg_all );
		@repl = ( $templ->{replication} );
	}
	else
	{
		@pgs = ( $pg_all, $pg_tail );
		@repl = ( $templ->{replication}-1, 1 );
	}
	
	my @res;
	for my $i (0..$#pgs)
	{
	
		my @phys_capa;
		my @phys_used;
		my $disk_count=0;
		
		for my $disk ( @{ storpool_get("placementGroup", $pgs[$i], "list")->{disks} } )
		{
			next unless defined $disks->{$disk}{objectsOnDiskSize};
			my $used = int $disks->{$disk}{objectsOnDiskSize} * $ONDISK_TO_PHYS;
			my $capa = ($disks->{$disk}{agCount} - $SAFETY_AGS) * $AG_SIZE;
			
			push @phys_used, $used;
			push @phys_capa, $capa;
			$disk_count++;
		}
		
		my $total_phys_ideal = sum @phys_capa;
		my $total_phys_used = sum @phys_used;
		
		# assume new data is going to fill drives proportionately as current data
		my @phys_free_est = ();
		
		for my $i (0..$disk_count-1)
		{
			my $frac = $phys_used[$i] / $total_phys_used; # fraction of data on this disk
			my $free = max( 0, ($phys_capa[$i] - $phys_used[$i]) * (1/$frac) );
			push @phys_free_est, $free;
		}
		
		my $total_phys_free = min(@phys_free_est);
		my $total_phys_capa = $total_phys_used + $total_phys_free;
		
		push @res, {
			"phys_used" => $total_phys_used / $repl[$i],
			"phys_free" => $total_phys_free / $repl[$i],
			"phys_capa" => $total_phys_capa / $repl[$i],
			"phys_ideal" => $total_phys_ideal / $repl[$i],
		};
		
	}
	{
		my $tmp = {
				"capacity" => int min( map { $_->{phys_capa} } @res) / $STORED_TO_PHYS,
				"ideal" => int min( map { $_->{phys_ideal} } @res) / $STORED_TO_PHYS,
				"used" => int max( map { $_->{phys_used} } @res) / $STORED_TO_PHYS
		};
		$tmp->{free} = max(0, $tmp->{capacity} - $tmp->{used} );
		
		
		push @{ $out{data} }, {
			"stored" => $tmp,
			map { $_ => $templ->{$_} } qw(name replication placeAll placeTail),
		};
	}
}

# humanify large numbers
#$_ = gigs $_ for values %{$res{hdd}}, values %{$res{ssd}}, values %{$res{summary}};

say JSON::XS->new->pretty->canonical->encode(\%out);

# say gigs $templates->[0]{storedSize};
