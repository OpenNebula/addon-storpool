#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015-2024, StorPool (storpool.com)                               #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#-------------------------------------------------------------------------------
# mkfs base64drvActionXML id
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Set up the environment to source common tools
#-------------------------------------------------------------------------------

if [[ -n "${ONE_LOCATION}" ]]; then
    LIB_LOCATION="${ONE_LOCATION}/lib"
else
    LIB_LOCATION="/usr/lib/one"
fi

# shellcheck source=/dev/null
. "${LIB_LOCATION}/sh/scripts_common.sh"

DRIVER_PATH="$(dirname "${0}")"
# shellcheck source=/dev/null
source "${DRIVER_PATH}/../libfs.sh"

if [[ -f "${DRIVER_PATH}/../../etc/datastore/datastore.conf" ]]; then
    # shellcheck source=/dev/null
    source "${DRIVER_PATH}/../../etc/datastore/datastore.conf"
fi

export LOG_PREFIX="ds"

# shellcheck source=tm/storpool/storpool_common.sh
source "${DRIVER_PATH}/../../tm/storpool/storpool_common.sh"

#-------------------------------------------------------------------------------
# Get mkfs and datastore arguments from OpenNebula core
#-------------------------------------------------------------------------------

if [[ -n "${2}" ]]; then
    DRV_ACTION="$1"
    ID="$2"
else
    DRV_ACTION="$(cat)"
    ID="$1"
fi

export DRV_ACTION

dumpTemplate "${DRV_ACTION}"

oneDsDriverAction

if [[ -n "${DRIVER}" && "${DRIVER,,}" != "raw" ]]; then
    log_error "Unsupported DRIVER format '${DRIVER}'! Please use 'raw'."
    splog "Unsupported DRIVER format '${DRIVER}'! Please use 'raw'."
    exit 1
fi


#-------------------------------------------------------------------------------
# Get datastore host, validate variables and set up datastore
#-------------------------------------------------------------------------------

if [[ -n "${BRIDGE_LIST}" ]]; then
    DST_HOST="$(get_destination_host "${ID}")"

    if [[ -z "${DST_HOST}" ]]; then
        error_message "Datastore template missing 'BRIDGE_LIST' attribute."
        exit 255
    fi
fi

set_up_datastore "${BASE_PATH}" "${RESTRICTED_DIRS:-/}" "${SAFE_DIRS:-/var/tmp}"

IMAGE_HASH="$(generate_image_hash)"
export IMAGE_HASH

SP_VOL="${ONE_PX}-img-${ID}"
SP_LINK="/dev/storpool/${SP_VOL}"
SP_TEMPLATE="${ONE_PX}-ds-${DATASTORE_ID}"
SP_DST="${SP_TEMPLATE}/${SP_VOL}"

#-------------------------------------------------------------------------------
# Image FSTYPE:save_as. If it is HOT snapshot then tm/cpds will take care of it later
#-------------------------------------------------------------------------------

case "${FSTYPE,,}" in
    raw|'')
        echo "${SP_DST}"
        ;;
    save_as)
        echo "${SP_DST}"
        splog "END (${FSTYPE}) return:${SP_DST}"
        exit 0
        ;;
    *)
        log_error "Unsupported FSTYPE '${FSTYPE}'! Please use 'raw'."
        splog "Unsupported FSTYPE '${FSTYPE}'! Please use 'raw'."
        exit 1
esac

storpoolVolumeCheck "${SP_VOL}"

#-------------------------------------------------------------------------------
# Create the image in the datastore
#-------------------------------------------------------------------------------

storpoolTemplate "${SP_TEMPLATE}"

storpoolVolumeCreate "${SP_VOL}" "${SIZE}"M "${SP_TEMPLATE}"

if type -t contains &>/dev/null; then
    if [[ -n "${SUPPORTED_FS}" ]]; then
        if contains "${SUPPORTED_FS}" "${FS}" ","; then
            splog "FS:'${FS}' is SUPPORTED_FS:${SUPPORTED_FS}"
        else
            splog "FS:'${FS}' not in SUPPORTED_FS:${SUPPORTED_FS}"
            FS=
        fi
    else
        if boolTrue "DEBUG_DS_MKFS"; then
            splog "[D] FS:'${FS}' but SUPPORTED_FS is empty."
        fi
        FS=
    fi
else
    FS=
fi

if [[ -n "${FSTYPE}" && "${FSTYPE,,}" != "raw" ]] || [[ -n "${FS}" ]]; then
    if boolTrue "DEBUG_DS_MKFS"; then
        splog "[D] FSTYPE='${FSTYPE}' FS='${FS}'"
    fi
    trapAdd "storpoolVolumeDelete \"${SP_VOL}\" force snaps"
    trapAdd "splog \"trap errno \$? \""

    storpoolVolumeAttach "${SP_VOL}" "${DST_HOST}"

    if [[ -n "${FS}" ]]; then
        FS_OPTS=$(eval "echo \$FS_OPTS_${FS}")
        MKFS_CMD="${MKFS:-mkfs} -F -t \"${FS}\" ${FS_OPTS} \"${SP_LINK}\""
    else
        MKFS_CMD=$(mkfs_command "${SP_LINK}" "${FSTYPE}" "${SIZE}")
    fi

    if [[ -n "${DST_HOST}" ]]; then
        splog "run mkfs on ${DST_HOST} (${MKFS_CMD})"
        ssh_exec_and_log "${DST_HOST}" "${MKFS_CMD}" \
                     "Error processing ${SP_VOL} on ${DST_HOST}"
    else
        splog "run mkfs local (${MKFS_CMD})"
        exec_and_log "${MKFS_CMD}" \
                     "Error processing ${SP_VOL}"
        splog "run mkfs completed"
    fi

    trapReset

    storpoolVolumeDetach "${SP_VOL}" "" "${DST_HOST}"
else
    splog "created raw image ${SP_VOL}"
fi

SP_QOSCLASS="${IMAGE_SP_QOSCLASS:-${DS_SP_QOSCLASS:-${DEFAULT_QOSCLASS}}}"
debug_sp_qosclass

storpoolVolumeTag "${SP_VOL}" "virt;${LOC_TAG:-nloc};qc" "one;${LOC_TAG_VAL};${SP_QOSCLASS}"

splog "END:${SP_DST}"
