#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015-2020, StorPool (storpool.com)                               #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#-------------------------------------------------------------------------------
# mkfs base64drvActionXML id
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Set up the environment to source common tools
#-------------------------------------------------------------------------------

if [ -n "${ONE_LOCATION}" ]; then
    LIB_LOCATION=$ONE_LOCATION/lib
else
    LIB_LOCATION=/usr/lib/one
fi

. $LIB_LOCATION/sh/scripts_common.sh

DRIVER_PATH=$(dirname $0)
source ${DRIVER_PATH}/../libfs.sh

LOG_PREFIX="ds"

source ${DRIVER_PATH}/../../tm/storpool/storpool_common.sh

#-------------------------------------------------------------------------------
# Get mkfs and datastore arguments from OpenNebula core
#-------------------------------------------------------------------------------

DRV_ACTION=$1
ID=$2

oneDsDriverAction "$DRIVER_PATH"

if [ -n "$DRIVER" ] && [ "${DRIVER,,}" != "raw" ]; then
    log_error "Unsupported DRIVER format '$DRIVER'! Please use 'raw'."
    splog "Unsupported DRIVER format '$DRIVER'! Please use 'raw'."
    exit 1
fi


#-------------------------------------------------------------------------------
# Get datastore host, validate variables and set up datastore
#-------------------------------------------------------------------------------

if [ -n "$BRIDGE_LIST" ]; then
    DST_HOST=`get_destination_host $ID`

    if [ "$DST_HOST" = "" ]; then
        error_message "Datastore template missing 'BRIDGE_LIST' attribute."
        exit -1
    fi
fi

set_up_datastore "$BASE_PATH" "$RESTRICTED_DIRS" "$SAFE_DIRS"

IMAGE_HASH=`generate_image_hash`

SP_VOL="${ONE_PX}-img-${ID}"
SP_LINK="/dev/storpool/$SP_VOL"
SP_TEMPLATE="${ONE_PX}-ds-${DATASTORE_ID}"
SP_DST="${SP_TEMPLATE}/${SP_VOL}"

#-------------------------------------------------------------------------------
# Image FSTYPE:save_as. If it is HOT snapshot then tm/cpds will take care of it later
#-------------------------------------------------------------------------------

case "${FSTYPE,,}" in
    raw)
        echo "$SP_DST"
        ;;
    save_as)
        echo "$SP_DST"
        splog "END ($FSTYPE) return:$SP_DST"
        exit 0
        ;;
    *)
        log_error "Unsupported FSTYPE '$FSTYPE'! Please use 'raw'."
        splog "Unsupported FSTYPE '$FSTYPE'! Please use 'raw'."
        exit 1
esac

#-------------------------------------------------------------------------------
# Create the image in the datastore
#-------------------------------------------------------------------------------

storpoolTemplate "$SP_TEMPLATE"

storpoolVolumeCreate "$SP_VOL" "${SIZE}"M "$SP_TEMPLATE"

if [ "$FSTYPE" = "raw" ]; then
    splog "created raw image $SP_VOL"
else

    trapAdd "splog \"return \$? \"; storpoolVolumeDelete \"$SP_VOL\" force snaps"

    storpoolVolumeAttach "$SP_VOL" "$DST_HOST"

    MKFS_RUN=`mkfs_command $SP_LINK $FSTYPE $SIZE`

    if [ -n "$DST_HOST" ]; then
        splog "run mkfs on $DST_HOST ($MKFS_RUN)"
        ssh_exec_and_log "$DST_HOST" "$MKFS_RUN" \
                     "Error processing $SP_VOL on $DST_HOST"
    else
        splog "run mkfs local ($MKFS_RUN)"
        exec_and_log "$MKFS_RUN" \
                     "Error processing $SP_VOL"
        splog "run mkfs completed"
    fi

    trapReset

    storpoolVolumeDetach "$SP_VOL" "" "$DST_HOST"
fi

splog "END:$SP_DST"
