#!/usr/bin/env python

# -------------------------------------------------------------------------- #
# Copyright 2015, StorPool (storpool.com)                                    #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#-------------------------------------------------------------------------------
# monitor base64datastoreXML
#-------------------------------------------------------------------------------

from sys import argv
from base64 import b64decode
import xml.etree.ElementTree as et

from storpool.spconfig import SPConfig
from storpool.spapi import Api, ApiError


xmlData = b64decode(argv[1])

dsTemplate = { 'SP_API_HTTP_HOST':'127.0.0.1', 'SP_API_HTTP_PORT':'81' }
for e in et.fromstring(xmlData).findall(".//DATASTORE/TEMPLATE/*"):
    dsTemplate[e.tag] = e.text

ds = {}
for e in et.fromstring(xmlData).findall(".//DATASTORE/*"):
    if e.text:
        ds[e.tag] = e.text

assert 'SP_PLACEALL' in dsTemplate.keys()
assert 'SP_REPLICATION' in dsTemplate.keys()

if 'SP_AUTH_TOKEN' not in dsTemplate.keys():
    cfg = SPConfig()
    for entry in ['SP_API_HTTP_HOST','SP_API_HTTP_PORT','SP_AUTH_TOKEN']:
        dsTemplate[entry] = cfg[entry]

api = Api(host=dsTemplate['SP_API_HTTP_HOST'], port=dsTemplate['SP_API_HTTP_PORT'], auth=dsTemplate['SP_AUTH_TOKEN'])

DS = 'one-ds-{0}'.format(ds['ID'])
PLACE_ALL = dsTemplate['SP_PLACEALL']
PLACE_TAIL = dsTemplate.get('SP_PLACETAIL', PLACE_ALL)
REPLICATION = int(dsTemplate['SP_REPLICATION'])

found = False
exists = False
while not found:
    for t in api.volumeTemplatesStatus():
        if t.name == DS:
            exists = True
            if (PLACE_ALL, PLACE_TAIL, REPLICATION) == (t.placeAll, t.placeTail, t.replication):
                estUsed = t.storedSize
                if t.placeAll == t.placeTail:
                    estTotal = t.availablePlaceTail / t.replication
                else:
                    estTotal = min(t.availablePlaceAll, t.availablePlaceTail)

                print "USED_MB={used}".format(used = estUsed / 1024 / 1024)
                print "TOTAL_MB={total}".format(total = estTotal / 1024 / 1024)
                print "FREE_MB={free}".format(free = (estTotal - estUsed) / 1024 / 1024)

                found = True
                break
    else:
        template = {'replication':REPLICATION, 'placeAll':PLACE_ALL, 'placeTail':PLACE_TAIL}
        if exists:
            template['propagate'] = True
            api.volumeTemplateUpdate(DS, template)
        else:
            template['name'] = DS
            api.volumeTemplateCreate(template)
