#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015-2020, StorPool (storpool.com)                               #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#-------------------------------------------------------------------------------
# cp base64drvActionXML id
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Set up the environment to source common tools
#-------------------------------------------------------------------------------

if [ -n "${ONE_LOCATION}" ]; then
    LIB_LOCATION=$ONE_LOCATION/lib
else
    LIB_LOCATION=/usr/lib/one
fi

. $LIB_LOCATION/sh/scripts_common.sh

DRIVER_PATH=$(dirname $0)
source ${DRIVER_PATH}/../libfs.sh

LOG_PREFIX="ds"

source ${DRIVER_PATH}/../../tm/storpool/storpool_common.sh

#-------------------------------------------------------------------------------
# Get cp and datastore arguments from OpenNebula core
#-------------------------------------------------------------------------------

DRV_ACTION="$1"
ID="$2"

#echo "cd $PWD; bash -x $0 $*" >"/tmp/cp-$ID"
oneDsDriverAction "$DRIVER_PATH"

#-------------------------------------------------------------------------------
# Validate variables
#-------------------------------------------------------------------------------

if [ -n "$BRIDGE_LIST" ]; then
    DST_HOST=`get_destination_host $ID`
    if [ "$DST_HOST" = "" ]; then
        error_message "Datastore template missing 'BRIDGE_LIST' attribute."
        exit -1
    fi
fi

set_up_datastore "$BASE_PATH" "$RESTRICTED_DIRS" "$SAFE_DIRS"

IMAGE_HASH=`generate_image_hash`

case "$IMAGE_PATH" in
*VMSNAP:*|*SPSNAPSHOT:*)
    oneSnapshotLookup "${IMAGE_PATH##*/}"
    ;;
http://*|https://*|ssh://*|s3://*|rbd://*|vcenter://*)
    log "Downloading $IMAGE_PATH to the image repository"
    ;;
*)
    if [ `check_restricted $IMAGE_PATH` -eq 1 ]; then
        log_error "Not allowed to copy images from $RESTRICTED_DIRS"
        error_message "Not allowed to copy image file $IMAGE_PATH"
        exit -1
    fi

    log "Copying local image $IMAGE_PATH to the image repository"
    if [ "${MD5}${SHA1}${NOLOCAL}" = "" ]; then
        localFile="$(echo "$IMAGE_PATH" | sed -e "s/'/'\\\''/g")"
        log "Using direct IO"
    else
        splog "${MD5:+MD5:$MD5 }${SHA1:+SHA1:$SHA1 }${NOLOCAL:+NOLOCAL:$NOLOCAL}"
    fi
    ;;
esac

SP_VOL="${ONE_PX}-img-${ID}"
SP_LINK="/dev/storpool/$SP_VOL"
SP_TEMPLATE="${ONE_PX}-ds-${DATASTORE_ID}"
SP_DST="$SP_TEMPLATE/$SP_VOL"

if [ -n "$SNAPSHOT_NAME" ]; then

    if [[ $IMAGE_GID -ne 0 ]]; then
        if [[ $VM_UID -ne $IMAGE_UID ]]; then
            errmsg="UID $IMAGE_UID is not allowed to import snapshot from VM with UID:$VM_UID"
            log_error "$errmsg"
            error_message "$errmsg"
            splog "$errmsg"
            exit -1
        fi
    fi

    msg="UID $IMAGE_UID with GID:$IMAGE_GID imported $SNAPSHOT_NAME (UID:$VM_UID) as $SP_DST"
    log "$msg"
    splog "$msg"

    storpoolSnapshotClone "$SNAPSHOT_NAME" "$SP_VOL" "$SP_TEMPLATE"

    FORMAT="raw"

    echo $SP_DST

else

    echo $SP_DST

    if [ -n "$SP_IMPORT_CGROUPS" ]; then
        set -o pipefail
        for cg in $SP_IMPORT_CGROUPS; do
            [ "${cg/../}" = "$cg" ] || continue
            [ -d "/sys/fs/cgroup/$cg" ] || continue
            echo $$ | sudo tee "/sys/fs/cgroup/${cg}/tasks" >/dev/null
            splog "($?) pin to cgroup $cg"
        done
#        splog "$(</proc/self/cgroup)"
    fi

    SP_TEMP_VOL="${SP_VOL}-$(echo "$SP_VOL" | md5sum | awk '{print $1}')"
    SP_TEMP_LINK="/dev/storpool/$SP_TEMP_VOL"
    if [ -n "$DST_HOST" ]; then
        DOWNLOADER_ARGS=`set_downloader_args "$MD5" "$SHA1" "$NO_DECOMPRESS" "$LIMIT_TRANSFER_BW" "$IMAGE_PATH" -`
    else
        DOWNLOADER_ARGS=`set_downloader_args "$MD5" "$SHA1" "$NO_DECOMPRESS" "$LIMIT_TRANSFER_BW" "$IMAGE_PATH" "$SP_TEMP_LINK"`
    fi

    COPY_CMD="${DRIVER_PATH}/../downloader.sh $DOWNLOADER_ARGS"

    #-------------------------------------------------------------------------------
    # Import image to temp volume
    #-------------------------------------------------------------------------------

    storpoolTemplate "$SP_TEMPLATE"

    storpoolVolumeCreate "$SP_TEMP_VOL" "$SIZE"M "$SP_TEMPLATE"

    trapAdd "storpoolVolumeDelete \"$SP_TEMP_VOL\" force snaps"

    storpoolVolumeAttach "$SP_TEMP_VOL" "$DST_HOST"

    tStart=$(date +%s)
    if [ -n "$DST_HOST" ]; then
        if [ -n "$localFile" ] && [ -f "$localFile" ]; then
            COPY_CMD="dd if=$localFile bs=\"${COPY_CMD_DS_BS:-1M}\" iflag=direct"
        fi
        splog "eval $COPY_CMD | $SSH $DST_HOST $DD of=$SP_TEMP_LINK bs=\"${COPY_CMD_DD_BS:-1M}\" status=none iflag=fullblock oflag=direct"
        multiline_exec_and_log "set -e -o pipefail; eval ${COPY_CMD//&/\\&} | $SSH $DST_HOST $DD of=$SP_TEMP_LINK bs=\"${COPY_CMD_DD_BS:-1M}\" status=none iflag=fullblock oflag=direct" \
                     "Error dumping $IMAGE_PATH to $DST_HOST:$SP_TEMP_LINK"
    else
        if [ -n "$localFile" ] && [ -f "$localFile" ]; then
            COPY_CMD="dd if=$localFile of=$SP_TEMP_LINK bs=\"${COPY_CMD_DD_BS:-1M}\" iflag=direct oflag=direct"
        fi
        splog "$COPY_CMD"
        multiline_exec_and_log "$COPY_CMD" \
                     "Error dumping $IMAGE_PATH to $SP_TEMP_VOL"
    fi
    tEnd=$(date +%s)
    tEnd=$((tEnd-tStart))
    [ $tEnd -ne 0 ] || tEnd=1
    splog "Image transferred in $tEnd seconds (~$((SIZE/tEnd))MB/s)"

    #-------------------------------------------------------------------------------
    # Process imported image
    #-------------------------------------------------------------------------------

    if [ -n "$DST_HOST" ]; then
        FORMAT=$($SSH $DST_HOST $QEMU_IMG info $SP_TEMP_LINK | grep "^file format:" | $AWK '{print $3}')
    else
        FORMAT=$($QEMU_IMG info $SP_TEMP_LINK | grep "^file format:" | $AWK '{print $3}')
    fi
    splog "$SP_TEMP_LINK FORMAT=$FORMAT SIZE=$SIZE $QEMU_IMG status:$?"

    if [ "$FORMAT" != "$DRIVER" ]; then
        splog "$QEMU_IMG detected format $FORMAT but DRIVER=$DRIVER in the image template"
    fi

    if [ "$FORMAT" = "raw" ]; then
        storpoolVolumeRename "$SP_TEMP_VOL" "$SP_VOL" "$SP_TEMPLATE"

        trapDel "storpoolVolumeDelete \"$SP_TEMP_VOL\" force snaps"

        trapAdd "storpoolVolumeDelete \"$SP_VOL\" force snaps"
    else
        storpoolTemplate "$SP_TEMPLATE"

        storpoolVolumeCreate "$SP_VOL" "$SIZE"M "$SP_TEMPLATE"

        trapAdd "storpoolVolumeDelete \"$SP_VOL\" force snaps"

        storpoolVolumeAttach "$SP_VOL" "$DST_HOST"

        POST_COPY_CMD=$(cat <<EOF
    set -e
    export PATH=/bin:/sbin:/usr/bin:/usr/sbin:\$PATH
    splog(){ logger -t "ds_sp_${0##*/}[\$\$]" "\$*"; }

    splog "$FORMAT $QEMU_IMG convert -t none -T none -O raw -S 4k  $SP_TEMP_LINK $SP_LINK"
    $QEMU_IMG convert -t none -T none -O raw -S 4k "$SP_TEMP_LINK" "$SP_LINK"
    sync
EOF
)
        tStart=$(date +%s)
        if [ -n "$DST_HOST" ]; then
            splog "convert from $FORMAT to raw at $DST_HOST"
            ssh_exec_and_log "$DST_HOST" "$POST_COPY_CMD" \
                             "Error converting image on $DST_HOST"
        else
            splog "$FORMAT $QEMU_IMG convert -t none -T none -O raw -S 4k  $SP_TEMP_LINK $SP_LINK"
            $QEMU_IMG convert -t none -T none -O raw -S 4k "$SP_TEMP_LINK" "$SP_LINK"
            sync
        fi
        tEnd=$(date +%s)
        splog "Image converted to raw in $((tEnd-tStart)) seconds"

        trapDel "storpoolVolumeDelete \"$SP_VOL\" force snaps"

        storpoolVolumeDetach "$SP_VOL" "" "$DST_HOST"

        trapDel "storpoolVolumeDelete \"$SP_TEMP_VOL\" force snaps"

        storpoolVolumeDelete "$SP_TEMP_VOL" "force" "snaps"

    fi

    storpoolVolumeDetach "$SP_VOL" "force" "$DST_HOST"

fi


#-------------------------------------------------------------------------------
# fix image DRIVER to raw
#-------------------------------------------------------------------------------

if [ "$DRIVER" != "raw" ]; then
    if boolTrue "UPDATE_IMAGE_ON_IMPORT"; then
        splog "Image template DRIVER=$DRIVER updating to DRIVER=raw"
        TMP_LOC="$(mktemp --directory --tmpdir cp-sp-XXXXXXXX)"
        TMP_XML="${TMP_LOC}/image-template"
        trapAdd "rm -rf \"$TMP_LOC\""
        echo "DRIVER=raw" >"$TMP_XML"
        echo "FORMAT=raw" >>"$TMP_XML"
        if [ -n "$DS_CP_FORCE_DEV_PREFIX" ]; then
            echo "DEV_PREFIX=$DS_CP_FORCE_DEV_PREFIX" >>"$TMP_XML"
        fi
        oneimage update -a "$ID" "$TMP_XML" 2>"$TMP_LOC/oneimage-update-err" >"$TMP_LOC/oneimage-update-out"
        ret=$?
        if [ $ret -ne 0 ]; then
            if grep -qir "${UPDATE_IMAGE_LOCK_STRING:-locked}" "${TMP_LOC}" 2>/dev/null; then
                splog "($ret) oneimage update $ID ... Re-trying with unlock"
                oneimage unlock "$ID"
                splog "($?) oneimage unlock $ID"
                oneimage update -a "$ID" "$TMP_XML"
                splog "($?) oneimage update $ID"
                oneimage lock "$ID"
                splog "($?) oneimage lock $ID"
            else
                splog "($ret) oneimage update -a $ID ... Failed!"
            fi
        fi
        rm -rf "$TMP_LOC"
    else
        splog "Image template DRIVER='$DRIVER' and FORMAT='$FORMAT' but image update is not enabled."
    fi
fi

trapReset

splog "END:$SP_DST"
