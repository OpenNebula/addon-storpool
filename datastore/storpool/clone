#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015-2024, StorPool (storpool.com)                               #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#-------------------------------------------------------------------------------
# clone base64drvActionXML id
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Set up the environment to source common tools
#-------------------------------------------------------------------------------

if [[ -n "${ONE_LOCATION}" ]]; then
    LIB_LOCATION="${ONE_LOCATION}/lib"
else
    LIB_LOCATION="/usr/lib/one"
fi

# shellcheck source=/dev/null
. "${LIB_LOCATION}/sh/scripts_common.sh"

DRIVER_PATH="$(dirname "$0")"
# shellcheck source=/dev/null
source "${DRIVER_PATH}/../libfs.sh"

export LOG_PREFIX="ds"

# shellcheck source=tm/storpool/storpool_common.sh
source "${DRIVER_PATH}/../../tm/storpool/storpool_common.sh"

#-------------------------------------------------------------------------------
# Get clone and datastore arguments from OpenNebula core
#-------------------------------------------------------------------------------

if [[ -n "$2" ]]; then
    DRV_ACTION="$1"
    ID="$2"
else
    DRV_ACTION="$(cat)"
    ID="$1"
fi

oneDsDriverAction
IMAGE_DS_SP_QOSCLASS="${DS_SP_QOSCLASS}"

SP_VOL="${ONE_PX:-one}-img-${ID}"
SP_PARENT="${IMAGE_PATH##*/}"
SP_TEMPLATE="${ONE_PX:-one}-ds-${DATASTORE_ID}"
SP_DST="${SP_TEMPLATE}/${SP_VOL}"

echo "${SP_DST}"

#-------------------------------------------------------------------------------
# Clone Image
#-------------------------------------------------------------------------------

SRC_DS_ID="${IMAGE_PATH%%/*}"
SRC_DS_ID="${SRC_DS_ID##*-}"

if [[ "${SRC_DS_ID}" -ne "${DATASTORE_ID}" ]]; then
    #DST_BRIDGE_LIST="${SP_BRIDGE_LIST}"  # TBD: refactor to not use BRIDGE_LIST use the hosts if available
    #DST_SP_API_HTTP_HOST="${SP_API_HTTP_HOST}"
    #DST_SP_API_HTTP_PORT="${SP_API_HTTP_PORT}"
    DST_SP_AUTH_TOKEN="${SP_AUTH_TOKEN}"
    #DST_SP_REPLICATION="${SP_REPLICATION}"
    #DST_SP_PLACEALL="${SP_PLACEALL}"
    #DST_SP_PLACETAIL="${SP_PLACETAIL}"
    #DST_SP_PLACEHEAD="${SP_PLACEHEAD}"
    #DST_SP_IOPS="${SP_IOPS}"
    #DST_SP_BW="${SP_BW}"
    #DST_TM_MAD="${TM_MAD}"

    oneDatastoreInfo "${SRC_DS_ID}"
    #SRC_BRIDGE_LIST="${SP_BRIDGE_LIST}"
    SRC_SP_API_HTTP_HOST="${SP_API_HTTP_HOST}"
    SRC_SP_API_HTTP_PORT="${SP_API_HTTP_PORT}"
    SRC_SP_AUTH_TOKEN="${SP_AUTH_TOKEN}"
    #SRC_SP_REPLICATION="${SP_REPLICATION}"
    #SRC_SP_PLACEALL="${SP_PLACEALL}"
    #SRC_SP_PLACETAIL="${SP_PLACETAIL}"
    #SRC_SP_PLACEHEAD="${SP_PLACEHEAD}"
    #SRC_SP_IOPS="${SP_IOPS}"
    #SRC_SP_BW="${SP_BW}"

    if [[ "${DS_TM_MAD}" != "${TM_MAD}" ]]; then
        splog "Clone from ${TM_MAD} to ${DS_TM_MAD} is not supported!"
        log "Clone from ${TM_MAD} to ${DS_TM_MAD} is not supported!"
        exit 255
    fi

    if [[ "${SRC_SP_AUTH_TOKEN}" != "${DST_SP_AUTH_TOKEN}" ]]; then
        #attach SRC volume to BRIDGE_LIST or here
        if [[ -n "${BRIDGE_LIST}" ]]; then
            SRC_HOST="$(get_destination_host "${ID}")"
            if [[ -z "${SRC_HOST}" ]]; then
                error_message "Can't get bridge host for datastore ${ID} from BRIDGE_LIST:${BRIDGE_LIST}"
                exit 255
            fi
        fi
        if [[ -n "${SP_CLONE_GW}" ]]; then
            SRC_SP_CLONE_GW="${SP_CLONE_GW}"
        else
            SRC_SP_CLONE_GW="${SRC_HOST}"
        fi
        CLONE_GW="${SRC_SP_CLONE_GW}"
        storpoolVolumeAttach "${SP_PARENT}" "${SRC_SP_CLONE_GW}" "ro"

        oneDsDriverAction
        IMAGE_DS_SP_QOSCLASS="${DS_SP_QOSCLASS}"

        if [[ -n "${BRIDGE_LIST}" ]]; then
            DST_HOST="$(get_destination_host "${ID}")"
            if [[ -z "${DST_HOST}" ]]; then
                error_message "Can't get bridge host for datastore ${ID} from BRIDGE_LIST:${BRIDGE_LIST}"
                exit 255
            fi
        fi
        if [[ -n "${SP_CLONE_GW}" ]]; then
            DST_SP_CLONE_GW="${SP_CLONE_GW}"
        else
            DST_SP_CLONE_GW="${DST_HOST}"
        fi
        CLONE_GW="${DST_SP_CLONE_GW}"

        #create DST volume with the given SIZE
        storpoolTemplate "${ONE_PX}-ds-${DATASTORE_ID}"
        storpoolVolumeCreate "${SP_VOL}" "${SIZE}"M "${ONE_PX}-ds-${DATASTORE_ID}"
        #attach DST volume to BRIDGE_LIST or here
        storpoolVolumeAttach "${SP_VOL}" "${DST_SP_CLONE_GW}"

        # SRC_HOST  dd if=SRC_VOL | ssh DST_HOST dd of=DST_VOL
        DST_CMD="dd of=/dev/storpool/${SP_VOL} bs=1M conv=fdatasync status=none iflag=fullblock oflag=direct"
        if [[ -n "${DST_SP_CLONE_GW}" ]]; then
            DST_CMD="${SSH:-ssh} ${CLONE_COMPRESSION:+-C} ${DST_SP_CLONE_GW} '${DST_CMD}'"
        fi
        SRC_CMD="dd if=/dev/storpool/${SP_PARENT} bs=1M status=none | ${DST_CMD}"
        if [[ -n "${SRC_SP_CLONE_GW}" ]]; then
            ${SSH:-ssh} "${SRC_SP_CLONE_GW}" "eval '${SRC_CMD}'"
            splog "ssh ${SRC_SP_CLONE_GW} 'eval ${SRC_CMD}' ($?)"
        else
            eval "${SRC_CMD}"
            splog "${SRC_CMD} ($?)"
        fi

        #detach DST_VOL
        storpoolVolumeDetach "${SP_VOL}" "" "${DST_SP_CLONE_GW}"

        SP_QOSCLASS="${IMAGE_SP_QOSCLASS:-${IMAGE_DS_SP_QOSCLASS:-${DEFAULT_QOSCLASS}}}"
        debug_sp_qosclass

        storpoolVolumeTag "${SP_VOL}" "virt;${LOC_TAG:-nloc};qc" "one;${LOC_TAG_VAL};${SP_QOSCLASS}"

        #detach SRC_VOL

        if [[ -n "${SRC_SP_API_HTTP_HOST}" ]]; then
            export SP_API_HTTP_HOST="${SRC_SP_API_HTTP_HOST}"
        else
            unset SP_API_HTTP_HOST
        fi
        if [[ -n "${SRC_SP_API_HTTP_PORT}" ]]; then
            export SP_API_HTTP_PORT="${SRC_SP_API_HTTP_PORT}"
        else
            unset SP_API_HTTP_PORT
        fi
        if [[ -n "${SRC_SP_AUTH_TOKEN}" ]]; then
            export SP_AUTH_TOKEN="${SRC_SP_AUTH_TOKEN}"
        else
            unset SP_AUTH_TOKEN
        fi
        CLONE_GW="${SRC_SP_CLONE_GW}"
        storpoolVolumeDetach "${SP_PARENT}" "" "${SRC_SP_CLONE_GW}"

        exit 0
    else
        # reset environment and fallback to default routine
        oneDsDriverAction
        IMAGE_DS_SP_QOSCLASS="${DS_SP_QOSCLASS}"
    fi
fi

storpoolVolumeCheck "${SP_VOL}"

storpoolTemplate "${SP_TEMPLATE}"

storpoolVolumeClone "${SP_PARENT}" "${SP_VOL}" "${SP_TEMPLATE}"

SP_QOSCLASS="${IMAGE_SP_QOSCLASS:-${IMAGE_DS_SP_QOSCLASS:-${DEFAULT_QOSCLASS}}}"
debug_sp_qosclass

storpoolVolumeTag "${SP_VOL}" "virt;${LOC_TAG:-nloc};qc" "one;${LOC_TAG_VAL};${SP_QOSCLASS}"

splog "END ${SP_DST}"
