#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015-2024, StorPool (storpool.com)                               #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

export LOG_PREFIX="vmm"
TMPDIR="$(mktemp -t -d deploy-tweaks-XXXXXXXX)"
trap 'rm -rf "${TMPDIR}"' EXIT QUIT TERM HUP INT
ERR_FILE="${TMPDIR}/error"

if [[ -f ./config ]]; then
    eval "$(grep -E 'DATASTORE_LOCATION|SCRIPTS_REMOTE_DIR' ./config || true)"
elif [[ -f /var/lib/one/config ]]; then
    eval "$(grep -E 'DATASTORE_LOCATION|SCRIPTS_REMOTE_DIR' /var/lib/one/config || true)"
fi

set -a

SCRIPT_PATH="$(dirname "$0")"
if [[ -f "${SCRIPT_PATH}/../../etc/vmm/kvm/kvmrc" ]]; then
    # shellcheck source=/dev/null
    source "${SCRIPT_PATH}/../../etc/vmm/kvm/kvmrc"
elif [[ -f "${SCRIPT_PATH}/kvmrc" ]]; then
    # shellcheck source=/dev/null
    source "${SCRIPT_PATH}/kvmrc"
fi
# shellcheck source=/dev/null
source "${SCRIPT_PATH}/../../scripts_common.sh"

if [[ -f "${SCRIPT_PATH}/../../addon-storpoolrc" ]]; then
    # shellcheck source=addon-storpoolrc
    source "${SCRIPT_PATH}/../../addon-storpoolrc"
fi

for var in ONE_PX NVRAM_TEMPLATE_PATH TMPDIR ERR_FILE; do
    [[ -z "${!var}" ]] || export "${var?}"
done

if [[ -d /opt/storpool/python3/bin ]]; then
    PATH="/opt/storpool/python3/bin:${PATH}"
    export PATH
fi

function splog()
{
    logger -t "vmm_sp_${0##*/}" "[$$] ${DEBUG_LINENO:+[${BASH_LINENO[-2]}]}$*"
}

DEP_FILE="$1"
HOST="$2"
VM_ID="$3"
DEP_NAME="$(basename "${DEP_FILE}")"
DEP_XML="${DEP_FILE}-tweaks"
VM_XML="${TMPDIR}/vm.xml"

cp -f "${DEP_FILE}" "${DEP_XML}"

onevm show "${VM_ID}" -x >"${VM_XML}" 2>"${ERR_FILE}"
ret=$?
if [[ "${ret:-}" -ne 0 ]]; then
    errmsg="[deploy-tweaks] Can't get VM ${VM_ID} XML, VM_XML=${VM_XML}"
    error_message "${errmsg}"
    cat "${ERR_FILE}" >&2
    splog "${errmsg}"
    exit 255
fi

declare -a _XPATH_A _XPATH_QUERY
_XPATH_A=(
    "${SCRIPT_PATH}/../../datastore/xpath.rb"
    "--stdin"
)
_XPATH_QUERY=(
    "/VM/DEPLOY_ID"
    "/VM/HISTORY_RECORDS/HISTORY[last()]/TM_MAD"
    "/VM/HISTORY_RECORDS/HISTORY[last()]/DS_ID"
)

unset i XPATH_ELEMENTS
while IFS='' read -r -u "${xpathfd}" -d '' element; do
    XPATH_ELEMENTS[i++]="${element}"
done {xpathfd}< <( sed '/\/>$/d' "${VM_XML}" | "${_XPATH_A[@]}" "${_XPATH_QUERY[@]}" || true)
unset i
export DEPLOY_ID="${XPATH_ELEMENTS[i++]}"
export TM_MAD="${XPATH_ELEMENTS[i++]}"
export DS_ID="${XPATH_ELEMENTS[i++]}"

if boolTrue "DDDDEBUG_deploy_tweaks"; then
    cp "${VM_XML}" "/tmp/dt-vm.xml"
    splog "[DDDD] created /tmp/dt-vm.xml"
fi

if [[ -z "${DS_ID}" ]]; then
    error_message "[deploy-tweaks] Can't get SYSTEM datastore ID for one-${VM_ID} VM_XML=${VM_XML} [${_XPATH_A[*]}] -- ${XPATH_ELEMENTS[*]}"
    cat "${ERR_FILE}" >&2
    exit 255
fi

if [[ -d "${0}.d" ]]; then
    while read -r -u "${hookfd}" hook; do
        [[ -x "${0}.d/${hook}" ]] || continue
        cp -f "${DEP_XML}" "${TMPDIR}/deployment.xml"
        splog "cp -f ${DEP_XML} ${TMPDIR}/deployment.xml ($?)"
        splog "Calling ${0}.d/${hook} ${TMPDIR}/deployment.xml ${TMPDIR}/vm.xml ..."
        "${0}.d/${hook}" "${TMPDIR}/deployment.xml" "${TMPDIR}/vm.xml" 2>"${ERR_FILE}"
        ret=$?
        splog "${hook} (${ret})"
        if [[ -n "${DEBUG_DEPLOY_TWEAKS:-}" ]]; then
            while read -r -u "${errfd}" line; do
                splog "[D][${hook}]stderr:${line}"
            done {errfd}< <(cat "${ERR_FILE}" || true)
        fi
        if [[ "${ret:-}" -eq 0 ]]; then
            xmllint --noout "${TMPDIR}/deployment.xml" 2>"${ERR_FILE}"
            ret=$?
            if [[ "${ret:-}" -eq 0 ]]; then
                mv -f "${TMPDIR}/deployment.xml" "${DEP_XML}"
                continue
            else
                splog "Error: ${hook} succeeded but xmllint failed with exit code ${ret:-}"
            fi
        else
            splog "${hook} failed with exit code ${ret}"
        fi
        if [[ -z "${DEBUG_DEPLOY_TWEAKS:-}" ]]; then
            while read -r -u "${errfd}" line; do
                splog "[D][${hook}]stderr:${line}"
            done {errfd}< <(cat "${ERR_FILE}" || true)
        fi
    done {hookfd}< <(ls -A "${0}.d" 2>"${ERR_FILE}" || true)
else
    splog "Directory ${0}.d not found!"
fi

splog "Sending ${DEP_XML} to ${HOST} for ${DATASTORE_LOCATION:-/var/lib/one/datastores}/${DS_ID}/${VM_ID}/${DEP_NAME} ..."
DOMAIN_ID="$(${SSH:-ssh} "${HOST}" "${SCRIPTS_REMOTE_DIR:-/var/tmp/one}/vmm/kvm/deploy ${DATASTORE_LOCATION:-/var/lib/one/datastores}/${DS_ID}/${VM_ID}/${DEP_NAME}" 2>>"${ERR_FILE}" <"${DEP_XML}")"
ret=$?
splog "VM ${VM_ID} deploy on ${HOST} returned (${ret}) DOMAIN_ID=${DOMAIN_ID}"

if [[ "${ret}" -eq 0 ]]; then
    echo "${DOMAIN_ID}"
else
    error_message "[deploy-tweaks] VM ${VM_ID} could not create domain from ${DEP_XML}"
    cat "${ERR_FILE}" >&2
    exit 255
fi
