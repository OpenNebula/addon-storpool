#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015-2020, StorPool (storpool.com)                               #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#-------------------------------------------------------------------------------
# snapshot_create  domain snap_id vm_id vmhost
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Get snapshot_create arguments from OpenNebula core
#-------------------------------------------------------------------------------

DOMAIN="$1"
SNAP_ID="$2"
VM_ID="$3"
VMHOST="$4"

DRIVER_PATH="$(dirname $0)"
VMSNAPSHOT_TAG="ONESNAP"
VMSNAPSHOT_OVERRIDE=1

[ -f "${DRIVER_PATH}/../../etc/vmm/kvm/kvmrc" ] && source "${DRIVER_PATH}/../../etc/vmm/kvm/kvmrc" || source "${DRIVER_PATH}/kvmrc"
source "${DRIVER_PATH}/../../scripts_common.sh"
source "${DRIVER_PATH}/../../tm/storpool/storpool_common.sh"

LOG_PREFIX="vmm"

splog "$0 $*"

if boolTrue "VMSNAPSHOT_OVERRIDE"; then
    oneVmVolumes "$VM_ID"
    splog "vmDisks:$vmDisks vmVolumes:'$vmVolumes'"
    if boolTrue "VMSNAPSHOT_ENABLE_LIMIT"; then
        if [ -n "$VM_VMSNAPSHOT_LIMIT" ]; then
            VMSNAPSHOT_LIMIT="$VM_VMSNAPSHOT_LIMIT"
        else
            oneDatastoreInfo "$VM_DS_ID"
        fi
        if [ -n "$VMSNAPSHOT_LIMIT" ] && \
           [ "${VMSNAPSHOT_LIMIT//[[:digit:]]}" = "" ]; then
           if [ $VMSNAPSHOT_LIMIT -lt ${#SNAPSHOT_ID_A[@]} ]; then
               res="VMSNAPSHOT_LIMIT of $VMSNAPSHOT_LIMIT snaphosts exceeded!"
               splog "$res"
               error_message "$res"
               exit 1
           else
               res="VM snapshots limit VMSNAPSHOT_LIMIT:$VMSNAPSHOT_LIMIT >= ${#SNAPSHOT_ID_A[@]}"
               log "$res"
               splog "$res"
           fi
        fi
    fi
    ts=$(date +%s)
    res="${VMSNAPSHOT_TAG}-${SNAP_ID}-${ts}"

    if boolTrue "VMSNAPSHOT_FSFREEZE"; then
        rCMD=$(cat <<EOF
    #echo "$DOMAIN"
    [ -f "/var/tmp/one/etc/vmm/kvm/kvmrc" ] && source "/var/tmp/one/etc/vmm/kvm/kvmrc" || source "/var/tmp/one/vmm/kvm/kvmrc"
    trap 'virsh --connect '\$LIBVIRT_URI' qemu-agent-command "'$DOMAIN'" "{\"execute\":\"guest-fsfreeze-thaw\"}" 2>&1 >/dev/null ;\
    logger -t "vmm_sp_snapshot_create_r[\$\$]" "fsthaw '$DOMAIN' ret:\$? \$(date +%s.%N) trap"' EXIT QUIT TERM INT HUP
    virsh --connect \$LIBVIRT_URI qemu-agent-command "$DOMAIN" "{\"execute\":\"guest-fsfreeze-freeze\"}" 2>&1 >/dev/null
    logger -t "vmm_sp_snapshot_create_r[\$\$]" "fsfreeze $DOMAIN ret:\$? \$(date +%s.%N)"
    while [ -d /proc/\$PPID ]; do
        logger -t "vmm_sp_snapshot_create_r[\$\$]" "$DOMAIN \$(virsh --connect \$LIBVIRT_URI qemu-agent-command "$DOMAIN" "{\"execute\":\"guest-fsfreeze-status\"}") \$(date +%s.%N)"
        sleep .1
    done
    virsh --connect \$LIBVIRT_URI qemu-agent-command "$DOMAIN" "{\"execute\":\"guest-fsfreeze-thaw\"}" 2>&1 >/dev/null
    logger -t "vmm_sp_snapshot_create_r[\$\$]" "fsthaw $DOMAIN ret:\$? \$(date +%s.%N)"
    logger -t "vmm_sp_snapshot_create_r[\$\$]" \$(virsh --connect \$LIBVIRT_URI qemu-agent-command "$DOMAIN" "{\"execute\":\"guest-fsfreeze-status\"}") \$(date +%s.%N)
    #trap - TERM INT QUIT HUP
EOF
)
        trap "trap - SIGTERM && kill -- -$$" TERM INT QUIT HUP EXIT
        ssh "$VMHOST" "$rCMD" 2>/dev/null >/dev/null &
        splog "VM $VM_ID host:$VMHOST DOMAIN_ID:$DOMAIN is frosen"
        sleep .1
    fi
    for volume in $vmVolumes; do
        snap="${volume}-${res}"
        list+=($volume $snap)
    done
    storpoolRetry groupSnapshot ${list[@]}
    if boolTrue "VMSNAPSHOT_FSFREEZE"; then
        pids="$(jobs -p)"
        if [ -n "$pids" ]; then
            kill $pids 2>/dev/null >/dev/null
            ret=$?
            splog "kill $pids ($ret)"
            if [ $ret -eq 0 ]; then
                splog "VM $VM_ID host:$VMHOST DOMAIN_ID:$DOMAIN is thawed"
                trap - TERM INT QUIT HUP EXIT
            else
                splog "Unable to kill the process holding the VM with freezed filesystem VM $VM_ID host:$VMHOST DOMAIN_ID:$DOMAIN"
            fi
        fi
    fi
    echo "$res"
    splog "END VM_ID=$VM_ID VMHOST=$VMHOST SNAP_ID=$SNAP_ID suffix:$res"
    exit 0
else
    splog "[CONTINUE]"
fi
