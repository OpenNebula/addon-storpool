#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015-2024, StorPool (storpool.com)                               #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#-------------------------------------------------------------------------------
# snapshot_create  domain snap_id vm_id vmhost
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Get snapshot_create arguments from OpenNebula core
#-------------------------------------------------------------------------------

DOMAIN="$1"
SNAP_ID="$2"
VM_ID="$3"
VMHOST="$4"

DRIVER_PATH="$(dirname "$0")"
VMSNAPSHOT_TAG="ONESNAP"
VMSNAPSHOT_OVERRIDE=1

if [[ -f "${DRIVER_PATH}/../../etc/vmm/kvm/kvmrc" ]]; then
    # shellcheck source=/dev/null
    source "${DRIVER_PATH}/../../etc/vmm/kvm/kvmrc"
else
    # shellcheck source=/dev/null
    source "${DRIVER_PATH}/kvmrc"
fi
# shellcheck source=/dev/null
source "${DRIVER_PATH}/../../scripts_common.sh"
# shellcheck source=tm/storpool/storpool_common.sh
source "${DRIVER_PATH}/../../tm/storpool/storpool_common.sh"

export LOG_PREFIX="vmm"

splog "$0 $*"

if boolTrue "VMSNAPSHOT_OVERRIDE"; then
    oneVmVolumes "${VM_ID}"
    oneDatastoreInfo "${VM_DS_ID}"

    splog "vmDisks:${vmDisks} vmVolumes:${vmVolumes}"

    if boolTrue "VMSNAPSHOT_ENABLE_LIMIT"; then
        if [[ -n "${VM_VMSNAPSHOT_LIMIT}" ]]; then
            VMSNAPSHOT_LIMIT="${VM_VMSNAPSHOT_LIMIT}"
        fi
        if [[ -n "${VMSNAPSHOT_LIMIT}" ]]; then
            if [[ -z "${VMSNAPSHOT_LIMIT//[[:digit:]]}" ]]; then
                if [[ "${VMSNAPSHOT_LIMIT}" -lt "${#SNAPSHOT_ID_A[@]}" ]]; then
                    res="VMSNAPSHOT_LIMIT of ${VMSNAPSHOT_LIMIT} snaphosts exceeded!"
                    splog "${res}"
                    error_message "${res}"
                    exit 1
                else
                    res="VM snapshots limit VMSNAPSHOT_LIMIT:${VMSNAPSHOT_LIMIT} >= ${#SNAPSHOT_ID_A[@]}"
                    splog "${res}"
                    log "${res}"
                fi
            else
                res="Error: VMSNAPSHOT_LIMIT='${VMSNAPSHOT_LIMIT}' Not a number"
                splog "${res}"
                error_message "${res}"
                exit 1
            fi
        fi
    fi
    ts=$(date +%s)
    res="${VMSNAPSHOT_TAG}-${SNAP_ID}-${ts}"
    for volume in ${vmVolumes}; do
        snap="${volume}-${res}"
        list+=("${volume}" "${snap}")
    done
    if boolTrue "VMSNAPSHOT_WITH_CHECKPOINT"; then
        # get guest memory
        rCMD=$(cat <<EOF
    [[ -f "/var/tmp/one/etc/vmm/kvm/kvmrc" ]] && source "/var/tmp/one/etc/vmm/kvm/kvmrc" || source "/var/tmp/one/vmm/kvm/kvmrc"
    virsh --connect \${LIBVIRT_URI:-qemu:///system} dumpxml "${DOMAIN}"
EOF
)
        domXML="$(${SSH:-ssh} "${VMHOST}" "${rCMD}")"
        domMem=$(echo "${domXML}" | xmlstarlet sel -t -v domain/memory)
        MEM_VOL="${ONE_PX}-sys-${VM_ID}"
        storpoolVolumeCreate "${MEM_VOL}" "$((domMem * 2))K" "${ONE_PX}-ds-${VM_DS_ID}"
        RET=$?
        if [[ "${RET}" -ne 0 ]]; then
            splog "Can't create checkpoint volume! Domain memory ${domMem}K"
        fi
        storpoolVolumeAttach "${MEM_VOL}" "${VMHOST}"
        if [[ "${RET}" -ne 0 ]]; then
            splog "Can't attach checkpoint volume to ${VMHOST}!"
        fi
        list+=("${MEM_VOL}" "${MEM_VOL}-${res}")
        json="$(volumesGroupSnapshotJson "tag:${VM_TAG:-nvm}=${VM_ID}" "tag:${LOC_TAG:-nloc}=${LOC_TAG_VAL}" "tag:virt=one" "${list[@]}")"
        apiCmd="$(storpoolApiCmdline=1 storpoolApi "VolumesGroupSnapshot" "${json}")"
        MEM_LNK="/dev/storpool/${MEM_VOL}"
        TDIR="$(mktemp -d)"
        trapAdd "rm -rf ${TDIR}"
        VM_XML="${TDIR}/one-${VM_ID}.XML"
        rCMD=$(cat <<EOF
 mkdir "${TDIR}"
 RET=\$?
 logger -t "${0##*/}_r[$$]" -- "mkdir ${TDIR}(\${RET})"
 [[ \${RET} -eq 0 ]] || exit "\${RET}"
 [[ -f "/var/tmp/one/etc/vmm/kvm/kvmrc" ]] && source "/var/tmp/one/etc/vmm/kvm/kvmrc" || source "/var/tmp/one/vmm/kvm/kvmrc"
 virsh --connect \${LIBVIRT_URI:-qemu:///system} save "${DOMAIN}" "${MEM_LNK}"
 RET=\$?
 logger -t "${0##*/}_r[$$]" -- "virsh save ${DOMAIN} ${MEM_LNK} (\$RET)"
 [[ \${RET} -eq 0 ]] || exit "\${RET}"
 virsh --connect \${LIBVIRT_URI:-qemu:///system} save-image-dumpxml "${MEM_LNK}" >"${VM_XML}"
 RET=\$?
 logger -t "${0##*/}_r[$$]" -- "virsh save-image-dumpxml ${MEM_LNK} >${VM_XML} (\$RET)"
 [[ \${RET} -eq 0 ]] || exit "\${RET}"
 ${apiCmd} >"${TDIR}/curl.out" 2>"${TDIR}/curl.err"
 RET=\$?
 APIRET=42
 logger -t "${0##*/}_r[$$]" -- "volumeGroupSnapshot (\${RET}) \$(cat "${TDIR}/curl.out")"
 if [[ \${RET} -eq 0 ]]; then
   OK=\$(jq -r '.data.ok' "${TDIR}/curl.out" 2>/dev/null)
   if [[ "\${OK}" == "true" ]]; then
     APIRET=0
   else
     logger -t "${0##*/}_r[$$]" -- "Error: OK='\${OK}'"
   fi
 else
   logger -t "${0##*/}_r[$$]" -- "Curl error: \$(cat "${TDIR}/curl.err")"
   exit "\${RET}"
 fi
 for i in 0 1 2; do
   virsh --connect \${LIBVIRT_URI:-qemu:///system} restore "${MEM_LNK}" --xml "${VM_XML}" &>>/tmp/one-${VM_ID}-\${i}.log
   RET=\$?
   logger -t "${0##*/}_r[$$]" -- "[\${i}] virsh restore ${MEM_LNK} --xml ${VM_XML} (\${RET})"
   [[ \${RET} -ne 0 ]] || break
   sleep 0.5
 done
 logger -t "${0##*/}_r[$$]" -- "END ${VM_ID} (\${APIRET}::\${RET})"
 rm -rf "${TDIR}"
 exit "\$((RET + APIRET))"
EOF
)
        if ${SSH:-ssh} "${VMHOST}" "${rCMD}" >"${TDIR}/ssh.out" 2>"${TDIR}/ssh.err"; then
            splog "OK ssh ${VMHOST} ($?)"
            RET=0
        else
            splog "ssh ${VMHOST} failed! ($?)"
            splog "DEBUG_OUT:$(cat "${TDIR}/ssh.out"||true)"
            splog "DEBUG_ERR:$(cat "${TDIR}/ssh.err"||true)"
            RET=1
        fi
        storpoolVolumeDelete "${MEM_VOL}" "force"
        if [[ "${RET}" -eq 0 ]]; then
            echo "${res}"
        fi
        splog "END VM_ID=${VM_ID} VMHOST=${VMHOST} SNAP_ID=${SNAP_ID} suffix:${res} (${RET})"
        exit "${RET}"
    fi

    if boolTrue "VMSNAPSHOT_FSFREEZE"; then
        rCMD=$(cat <<EOF
    PARENTPID=\${PPID}
    #echo "${DOMAIN}"
    [[ -f "/var/tmp/one/etc/vmm/kvm/kvmrc" ]] && source "/var/tmp/one/etc/vmm/kvm/kvmrc" || source "/var/tmp/one/vmm/kvm/kvmrc"
    trap 'virsh --connect \${LIBVIRT_URI:-qemu:///system} qemu-agent-command "'${DOMAIN}'" "{\"execute\":\"guest-fsfreeze-thaw\"}" 2>&1 >/dev/null ;\
    logger -t "vmm_sp_snapshot_create_r[\$\$]" "fsthaw '${DOMAIN}' ret:\$? \$(date +%s.%N) trap"' EXIT QUIT TERM INT HUP
    virsh --connect \${LIBVIRT_URI:-qemu:///system} qemu-agent-command "${DOMAIN}" "{\"execute\":\"guest-fsfreeze-freeze\"}" 2>&1 >/dev/null
    logger -t "vmm_sp_snapshot_create_r[\$\$]" "fsfreeze ${DOMAIN} ret:\$? \$(date +%s.%N)"
    while [ -d /proc/\$PARENTPID ]; do
        logger -t "vmm_sp_snapshot_create_r[\$\$]" "${DOMAIN} \$(virsh --connect \${LIBVIRT_URI:-qemu:///system} qemu-agent-command "${DOMAIN}" "{\"execute\":\"guest-fsfreeze-status\"}") \$(date +%s.%N)"
        sleep ${VMSNAPSHOT_SLEEP_REMOTE:-.1}
    done
    virsh --connect \${LIBVIRT_URI:-qemu:///system} qemu-agent-command "${DOMAIN}" "{\"execute\":\"guest-fsfreeze-thaw\"}" 2>&1 >/dev/null
    logger -t "vmm_sp_snapshot_create_r[\$\$]" "fsthaw ${DOMAIN} ret:\$? \$(date +%s.%N)"
    logger -t "vmm_sp_snapshot_create_r[\$\$]" \$(virsh --connect \${LIBVIRT_URI:-qemu:///system} qemu-agent-command "${DOMAIN}" "{\"execute\":\"guest-fsfreeze-status\"}") \$(date +%s.%N)
    #trap - TERM INT QUIT HUP
EOF
)
        # shellcheck disable=SC2064
        trap "trap - SIGTERM && kill -- -$$" TERM INT QUIT HUP EXIT
        ${SSH:-ssh} "${VMHOST}" "${rCMD}" 2>/dev/null >/dev/null &
        splog "VM ${VM_ID} host:${VMHOST} DOMAIN_ID:${DOMAIN} is frosen"
        sleep "${VMSNAPSHOT_SLEEP:-.3}"
    fi
    storpoolRetry groupSnapshot "tag:${VM_TAG:-nvm}=${VM_ID}" "tag:${LOC_TAG:-nloc}=${LOC_TAG_VAL}" "tag:virt=one" "${list[@]}"
    if boolTrue "VMSNAPSHOT_FSFREEZE"; then
        pids="$(jobs -p)"
        if [[ -n "${pids}" ]]; then
            # shellcheck disable=SC2086
            kill ${pids} 2>/dev/null >/dev/null
            ret=$?
            splog "kill ${pids} (${ret})"
            if [[ "${ret}" -eq 0 ]]; then
                splog "VM ${VM_ID} host:${VMHOST} DOMAIN_ID:${DOMAIN} is thawed"
                trap - TERM INT QUIT HUP EXIT
            else
                splog "Unable to kill the process holding the VM with freezed filesystem VM ${VM_ID} host:${VMHOST} DOMAIN_ID:${DOMAIN}"
            fi
        fi
    fi
    echo "${res}"
    splog "END VM_ID=${VM_ID} VMHOST=${VMHOST} SNAP_ID=${SNAP_ID} suffix:${res}"
    exit 0
else
    res="VMSNAPSHOT_OVERRIDE is not set"
    splog "${res}"
    error_message "${res}"
    exit 1
fi
