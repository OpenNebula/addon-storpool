#!/bin/bash
#
# -------------------------------------------------------------------------- #
# Copyright 2015-2020, StorPool (storpool.com)                               #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#---------------------------------------------------------------------------
# The script returns XML with the used size in this device and if there are snapshots the size per snapshot id.
# The XML is parsed and the desired structure is filled up.
#
# Here is the schema for the returned xml:
#
# <?xml version="1.0" encoding="UTF-8" ?>
# <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
#   <xs:element name="disk">
#     <xs:element name="size" type="xs:positiveInteger"/>
#     <xs:element name="snapshot" minOccurs="0" maxOccurs="unbounded">
#       <xs:complexType>
#         <xs:sequence>
#           <xs:element name="id" type="xs:positiveInteger"/>
#           <xs:element name="size" type="xs:positiveInteger"/>
#         </xs:sequence>
#       </xs:complexType>
#     </xs:element>
#   </xs:element>
# </xs:schema>
#---------------------------------------------------------------------------

#set -x
set -e

export PATH=/bin:/sbin:/usr/bin:/usr/sbin:$PATH

disk_size=0

dev="$1"

splog()
{
	logger -t "${0##*/}[$$]" "$*"
}

SP_JSON_PATH="/tmp"
SP_SPACE_USED_LVMWAY=
SP_VOLUME_SPACE_JSON="storpool_volume_usedSpace.json"
SP_CMD_VOLUME_SPACE="cat _SP_JSON_PATH_/_SP_VOLUME_SPACE_JSON_"
SP_SNAPSHOT_SPACE_JSON="storpool_snapshot_space.json"
SP_CMD_SNAPSHOT_SPACE="cat _SP_JSON_PATH_/_SP_SNAPSHOT_SPACE_JSON_"
BLOCKDEV_GET_SIZE='blockdev -q --getsize64'

if [ -f "../../addon-storpoolrc" ]; then
	source "../../addon-storpoolrc"
fi
if [ -f "/etc/storpool/addon-storpool.conf" ]; then
	source "/etc/storpool/addon-storpool.conf"
fi

# expand SP_CMD_VOLUME_SPACE macro variables
SP_CMD_VOLUME_SPACE="${SP_CMD_VOLUME_SPACE//_DATASTORE_ID_/$DS_ID}"
SP_CMD_VOLUME_SPACE="${SP_CMD_VOLUME_SPACE//_CLUSTER_ID_/$CLUSTER_ID}"
SP_CMD_VOLUME_SPACE="${SP_CMD_VOLUME_SPACE//_SP_API_HTTP_HOST_/$SP_API_HTTP_HOST}"
SP_CMD_VOLUME_SPACE="${SP_CMD_VOLUME_SPACE//_SP_VOLUME_SPACE_JSON_/$SP_VOLUME_SPACE_JSON}"
SP_CMD_VOLUME_SPACE="${SP_CMD_VOLUME_SPACE//_SP_JSON_PATH_/$SP_JSON_PATH}"

# expand SP_CMD_SNAPSHOT_SPACE macro variables
SP_CMD_SNAPSHOT_SPACE="${SP_CMD_SNAPSHOT_SPACE//_DATASTORE_ID_/$DS_ID}"
SP_CMD_SNAPSHOT_SPACE="${SP_CMD_SNAPSHOT_SPACE//_CLUSTER_ID_/$CLUSTER_ID}"
SP_CMD_SNAPSHOT_SPACE="${SP_CMD_SNAPSHOT_SPACE//_SP_API_HTTP_HOST_/$SP_API_HTTP_HOST}"
SP_CMD_SNAPSHOT_SPACE="${SP_CMD_SNAPSHOT_SPACE//_SP_SNAPSHOT_SPACE_JSON_/$SP_SNAPSHOT_SPACE_JSON}"
SP_CMD_SNAPSHOT_SPACE="${SP_CMD_SNAPSHOT_SPACE//_SP_JSON_PATH_/$SP_JSON_PATH}"

if [ -L "$dev" ]; then
	realDev=$(readlink -e $dev)
else
	realDev="$dev"
fi

if [ "${realDev%-*}" = "/dev/sp" ]; then
	spDev=$(readlink $dev)
	spVolume=${spDev#/dev/storpool/}
	if [ -n "$SP_SPACE_USED_LVMWAY" ]; then
		used="storedSize"
	else
		used="spaceUsed"
	fi
	spSize=$(eval $SP_CMD_VOLUME_SPACE | jq -r ".data | map( select( .name==\"${spVolume}\" ) ) | .[] | [.${used}] | @csv") #"
	[ -n "$spSize" ] || exit 1
	echo "<disk>"
	echo " <size>$spSize</size>"
	echo " <volume>$spVolume</volume>"
	if [ -n "$POLL_DISK_INFO_DEBUG" ]; then
		splog "$dev $spVolume $spSize"
	fi
	while IFS=',' read name snap_size; do
		name=${name//\"/}
#		[ "${name%-snap*}" = "$spVolume" ] || continue
		snap_id=${name#*snap}
		if [ -n "$POLL_DISK_INFO_DEBUG" ]; then
			splog "$dev $name $snap_size"
		fi
		cat <<EOF
 <snapshot>
  <id>$snap_id</id>
  <size>$snap_size</size>
 </snapshot>
EOF
	done < <(eval $SP_CMD_SNAPSHOT_SPACE | jq -r ".data | map( select( .name | contains(\"${spVolume}-snap\") ) ) | .[] | [.name, .${used}] | @csv" | sort)
else
	if [ -b "$realDev" ]; then
		disk_size=$($BLOCKDEV_GET_SIZE "$realDev")
	else
		 if [ -f "$realDev" ]; then
			disk_size=$(du -k $realDev | cut -f1)
			[ -n "$disk_size" ] && disk_size=$(( disk_size * 1024 ))
		fi
	fi
	[ -n "$disk_size" ] || exit 1
	echo "<disk>"
	echo " <size>$disk_size</size>"
	if [ -n "$POLL_DISK_INFO_DEBUG" ]; then
		splog "$dev $disk_size"
	fi
fi
echo "</disk>"
