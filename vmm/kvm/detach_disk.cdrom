#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015-2024, StorPool (storpool.com)                               #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

WORKDIR=$(dirname "$0")
source "${WORKDIR}/../../etc/vmm/kvm/kvmrc"
source "${WORKDIR}/../../scripts_common.sh"
if [[ -f "${WORKDIR}/addon-storpoolrc" ]]; then
    source "${WORKDIR}/addon-storpoolrc"
fi

set -o pipefail

function splog()
{
    logger -t "vmm_sp_${0##*/}" "[$$] ${DEBUG_LINENO:+[${BASH_LINENO[-2]}]}$*"
}

# args: 51c00be9-545c-41ae-a79c-6dd54bc4479a /var/lib/one//datastores/0/0/disk.2 hdb 1 0 kvm2

DOMAIN="$1"
SOURCE="$2"
TARGET="$3"
DISK_ID="$4"
VM_ID="$5"
KVMHOST="$6"

splog "$0 $*"

set -o pipefail

# virsh dumpxml one-0 | xmlstarlet sel -t -m './/devices/disk[@device="cdrom"]' -v "target/@dev" -o " " -v "source/@dev" -n
# hda /var/lib/one//datastores/0/0/disk.1
# hdb

TARGET_DEVICE=""
while read -ru 4 target_dev source_x; do
    if [[ -n "${DEBUG_DETACH_DISK}" ]]; then
        splog "[D] ${DOMAIN} target/@dev=${target_dev} source_x=${source_x}"
    fi
    if [[ "${target_dev:0:2}" == "hd" ]]; then
        if [[ "${source_x##*/}" == "${SOURCE##*/}" ]]; then
            TARGET_DEVICE="${target_dev}"
            break
        fi
    fi
done 4< <(virsh --connect "${LIBVIRT_URI}" dumpxml "${DOMAIN}" | \
    xmlstarlet sel -t -m './/devices/disk[@device="cdrom"]' -v "target/@dev" -o " " -v "source/@dev" -v "source/@file" -n || true)

splog "${DOMAIN} TARGET_DEVICE='${TARGET_DEVICE}' ${source_dev}"

if [[ -n "${TARGET_DEVICE}" ]]; then
    CMD="virsh --connect ${LIBVIRT_URI} change-media ${DOMAIN} ${TARGET_DEVICE} \
        --eject --force"

    exec_and_log "${CMD}" "Could not eject CDROM ${TARGET_DEVICE}"
    ret=$?
    logmsg="${CMD} # SOURCE:${SOURCE} (${ret})"
    splog "${logmsg}"
    log "${logmsg}"
    while read -u 4 q t f l; do
        splog "${q} locked:${l} tray_open:${t} file:${f} (${target}:${ret})"
    done 4< <(virsh --connect ${LIBVIRT_URI} qemu-monitor-command "${DOMAIN}" --cmd '{"execute":"query-block"}' |\
        jq -r '.return[]|select(.removable)|.qdev+" "+(.tray_open|tostring)+" "+(.inserted.file|tostring)+" "+(.locked|tostring)')
else 
    localscript="$(dirname "$(realpath "$0")")/detach_disk"
    "${localscript}" "$@"
    ret=$?
    splog "${localscript} "$@" (${ret}) //END native"
fi

exit "${ret}"
