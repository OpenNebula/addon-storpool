#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015-2024, StorPool (storpool.com)                               #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

WORKDIR=$(dirname "$0")
# shellcheck source=/dev/null
source "${WORKDIR}/../../etc/vmm/kvm/kvmrc"
# shellcheck source=/dev/null
source "${WORKDIR}/../../scripts_common.sh"
if [[ -f "${WORKDIR}/addon-storpoolrc" ]]; then
    # shellcheck source=addon-storpoolrc
    source "${WORKDIR}/addon-storpoolrc"
fi

function splog()
{
    logger -t "vmm_sp_${0##*/}" "[$$] ${DEBUG_LINENO:+[${BASH_LINENO[-2]}]}$*"
}

set -o pipefail

DOMAIN="$1"
SOURCE="$2"
TARGET="$3"
TARGET_INDEX="$4"
DRV_ACTION="$5"
export DRV_ACTION TARGET_INDEX

if [[ -n "${DEBUG_ATTACH_DISK}" ]]; then
    splog "[D] $0 $1 $2 $3 $4 ${5:0:8}"
fi

TARGET_DEVICE=""
declare -A available
while read -r -u "${domfd}" target_dev source_x; do
    splog "${DOMAIN} target/@dev=${target_dev} source=${source_x}"
    if [[ "${source_x##*/}" == "" ]]; then
        available[${target_dev}]="${target_dev}"
    fi
done {domfd}< <(virsh --connect "${LIBVIRT_URI:-qemu:///system}" dumpxml "${DOMAIN}" | \
    xmlstarlet sel -t -m './/devices/disk[@device="cdrom"]' -v "target/@dev" -o " " -v "source/@dev" -v "source/@file" -n || true)

if [[ -n ${available[${TARGET}]} ]]; then
    TARGET_DEVICE="${TARGET}"
else
    read -r -a keys <<< "${!available[@]}"
    TARGET_DEVICE="${keys[0]}"
fi

if [[ -z "${TARGET_DEVICE}" ]]; then
    errmsg="Error: No free CDROM device found!"
    splog "${errmsg} //END (1)"
    echo "${errmsg}" >&2
    exit 1
fi

ISO_PATH="${SOURCE}"

OPTIONS="--insert"
if [[ -b "${ISO_PATH}" ]]; then
    OPTIONS+=" --block"
fi

ATTACH_CMD=$(cat <<EOF
virsh --connect "${LIBVIRT_URI:-qemu:///system}" \
    change-media "${DOMAIN}" "${TARGET_DEVICE}" "${ISO_PATH}" ${OPTIONS}
EOF
)
if [[ -n "${DEBUG_ATTACH_DISK}" ]]; then
    splog "[D] ATTACH_CMD=${ATTACH_CMD}"
fi

multiline_exec_and_log "${ATTACH_CMD}" \
    "Could not ${OPTIONS} ${ISO_PATH} (${TARGET_DEVICE}) to ${DOMAIN}"
ret=$?

while read -r -u "${virshfd}" qdev tray_open inserted_file locked; do
    splog "${qdev} locked:${locked} tray_open:${tray_open} inserted_file:${inserted_file} // ${TARGET_DEVICE} (ret:${ret})"
done {virshfd}< <(virsh --connect "${LIBVIRT_URI:-qemu:///system}" qemu-monitor-command "${DOMAIN}" --cmd '{"execute":"query-block"}' |\
    jq -r '.return[]|select(.removable)|.qdev+" "+(.tray_open|tostring)+" "+(.inserted.file|tostring)+" "+(.locked|tostring)' || true)

exit "${ret}"
