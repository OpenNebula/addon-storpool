#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015-2025, StorPool (storpool.com)                               #
#                                                                            #
# Portions copyright OpenNebula Project, OpenNebula Systems                  #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#-------------------------------------------------------------------------------
# snapshot_create  domain snap_id vm_id vmhost
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Get snapshot_create arguments from OpenNebula core
#-------------------------------------------------------------------------------

DOMAIN="$1"
SNAP_ID="$2"
VM_ID="$3"
VMHOST="$4"
export DOMAIN

DRIVER_PATH="$(dirname "$0")"
if [[ -f "${DRIVER_PATH}/../../etc/vmm/kvm/kvmrc" ]]; then
    # shellcheck source=/dev/null
    source "${DRIVER_PATH}/../../etc/vmm/kvm/kvmrc"
else
    # shellcheck source=/dev/null
    source "${DRIVER_PATH}/kvmrc"
fi
# shellcheck source=/dev/null
source "${DRIVER_PATH}/../../scripts_common.sh"
# shellcheck source=tm/storpool/storpool_common.sh
source "${DRIVER_PATH}/../../tm/storpool/storpool_common.sh"

export LOG_PREFIX="vmm"

if boolTrue "DEBUG_VMSNAPSHOT"; then
    splog "[D] $0 $*"
fi

if boolTrue "VMSNAPSHOT_OVERRIDE"; then
    oneVmVolumes "${VM_ID}"
    oneDatastoreInfo "${VM_DS_ID}"

    declare -A diskVolumes
    for volume in ${vmVolumes}; do
        diskVolumes["${volume}"]="${volume}"
    done
    if boolTrue "VMSNAPSHOT_WITH_CHECKPOINT"; then
        MEM_VOL="${ONE_PX}-sys-${VM_ID}"
        diskVolumes["${MEM_VOL}"]="${MEM_VOL}"
    fi
	while read -r -u "${spfh}" snap vmtag loctagval; do
        if boolTrue "DDEBUG_VMSNAPSHOT"; then
            splog "[DD] ${snap} vmtag:${vmtag} loctagval:${loctagval}"
        fi
        snapVol="${snap%"-${VMSNAPSHOT_TAG}"*}"
        if [[ -n "${vmtag/null/}" ]]; then
            if [[ "${VM_ID}" != "${vmtag}" ]]; then
                if boolTrue "DEBUG_VMSNAPSHOT"; then
                    splog "[D] Skip ${snap} (${VM_ID} != ${vmtag}, VM_TAG=${VM_TAG})"
                fi
                continue
            fi
            if [[ -n "${loctagval/null/}" ]]; then
                if [[ "${loctagval}" != "${LOC_TAG_VAL}" ]]; then
                    if boolTrue "DEBUG_VMSNAPSHOT"; then
                        splog "[D] Skip ${snap} (loctagval ${loctagval} != ${LOC_TAG_VAL})"
                    fi
                    continue
                fi
            fi
        elif [[ "${snap:0:1}" == "*" ]]; then
			if boolTrue "DEBUG_VMSNAPSHOT"; then
				splog "[D] Skip ${snap} (already deleting)"
			fi
			continue
        elif [[ -z "${diskVolumes["${snapVol}"]}" ]]; then
			if boolTrue "DEBUG_VMSNAPSHOT"; then
				splog "[D] Skip ${snap} (not in vmVolumes:${vmVolumes})"
			fi
			continue
		fi
		storpoolRetry snapshot "${snap}" delete "${snap}"
	done {spfh}< <(storpoolRetry -j snapshot list |\
				jq -r --arg snp "${SNAP_ID}" --arg vmtag "${VM_TAG:-nvm}" --arg loctag "${LOC_TAG:-nloc}" \
                    '.data|map(select(.name|contains($snp)))[]|.name+" "+.tags[$vmtag]+" "+.tags[$loctag]' || true)
    exec {spfh}<&-
	splog "END VM_ID=${VM_ID} VMHOST=${VMHOST} SNAP_ID=${SNAP_ID}"
	exit 0
fi
