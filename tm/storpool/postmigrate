#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015-2020, StorPool (storpool.com)                               #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
# Portions copyright Asociacion Clubs Baloncesto (acb.com)                   #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#-------------------------------------------------------------------------------
# postmigrate srcHost dstHost vmPath vmId datasourceId template
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Get postmigrate arguments from OpenNebula core
#-------------------------------------------------------------------------------

SRC_HOST="$1"
DST_HOST="$2"
VM_PATH="$3"
VM_ID="$4"
DS_ID="$5"
TEMPLATE="$6"
SYSTEM_MAD="$7"

TM_PATH="$(dirname $0)"
for _PATH in "$TM_PATH/"{,..,../..,../../..}/storpool; do
    if [ -f "${_PATH}/storpool_common.sh" ]; then
        source "${_PATH}/storpool_common.sh"
        break;
    fi
done

if [ ! -t 0 ]; then
    tmpxml="$(mktemp -t postmigrate-${VM_ID}-XXXXXXXX)"
    trapAdd "rm -rf \"$tmpxml\""
    cat > "$tmpxml"
    if [ -s "$tmpxml" ]; then
        SYSTEM_MAD="$6"
        TEMPLATE="$tmpxml"
    fi
fi

if [ "${SYSTEM_MAD:0:8}" = "storpool" ]; then
    if boolTrue "DEBUG_MIGRATE_LIVE"; then
        splog "SRC_HOST=$SRC_HOST DST_HOST=$DST_HOST VM_PATH=$VM_PATH VM_ID=$VM_ID DS_ID=$DS_ID SYSTEM_MAD=$SYSTEM_MAD (exit)"
    fi
    exit 0
fi

splog "SRC_HOST=$SRC_HOST DST_HOST=$DST_HOST VM_PATH=$VM_PATH VM_ID=$VM_ID DS_ID=$DS_ID SYSTEM_MAD=$SYSTEM_MAD"

#-------------------------------------------------------------------------------
# Get SYSTEM Datastore information
#-------------------------------------------------------------------------------
oneDatastoreInfo "$DS_ID"

#-------------------------------------------------------------------------------
# Get VM information
#-------------------------------------------------------------------------------
oneTemplateInfo "$TEMPLATE"

#-------------------------------------------------------------------------------
# Detach storpool volumes
#-------------------------------------------------------------------------------
for i in ${!DISK_ID_ARRAY[@]}; do
    if [ "${DISK_TM_MAD_ARRAY[i]}" = "storpool" ]; then
        DISK_ID="${DISK_ID_ARRAY[i]}"
        DISK_SOURCE="${DISK_SOURCE_ARRAY[i]}"
        if [ -n "$DISK_SOURCE" ]; then
            DST_PATH="$VM_PATH/disk.${DISK_ID}"
            SP_VOL="${DISK_SOURCE##*/}"
            if boolTrue "DISK_CLONE_ARRAY[i]"; then
                SP_VOL+="-${VM_ID}-${DISK_ID_ARRAY[i]}"
            elif [ "${DISK_TYPE_ARRAY[i]}" = "CDROM" ]; then
                # backward compatibility /clean up/
                storpoolVolumeDetach "$SP_VOL" "" "$SRC_HOST" "none" "${DISK_READONLY_ARRAY[i]}"
                SP_VOL+="-${VM_ID}-${DISK_ID_ARRAY[i]}"
            fi
            storpoolVolumeDetach "$SP_VOL" "force" "$SRC_HOST" "none" "${DISK_READONLY_ARRAY[i]}"
        else
            if boolTrue "DEBUG_MIGRATE_LIVE"; then
                splog "skip volatile disk for $DS_ID/$VM_ID/disk.${DISK_ID}"
            fi
        fi
    fi
done

if [ "${DS_TM_MAD:0:8}" = "storpool" ]; then
    #-------------------------------------------------------------------------------
    # Detach volatile disk volumes
    #-------------------------------------------------------------------------------
    for i in ${!DISK_ID_ARRAY[@]}; do
        if [ "${DISK_TM_MAD_ARRAY[i]}" = "" ] || [ "${DISK_SOURCE_ARRAY[i]}" = "" ]; then
            FORMAT="${DISK_FORMAT_ARRAY[i]:-raw}"
            if [ ${DISK_TYPE_ARRAY[i]} = "swap" ]; then
                FORMAT="swap"
            fi
            SP_VOL="${ONE_PX}-sys-${VM_ID}-${DISK_ID_ARRAY[i]}-${FORMAT}"
            DST_PATH="${VM_PATH}/disk.${DISK_ID_ARRAY[i]}"
            storpoolVolumeDetach "$SP_VOL" "force" "$SRC_HOST"
         fi
    done

    #-------------------------------------------------------------------------------
    # Detach context ISO volume
    #-------------------------------------------------------------------------------
    if [ -n "$_CONTEXT_DISK_ID" ]; then
        SP_VOL="${ONE_PX}-sys-${VM_ID}-${_CONTEXT_DISK_ID}-iso"
        storpoolVolumeDetach "$SP_VOL" "force" "$SRC_HOST"
    fi

    #-------------------------------------------------------------------------------
    # Call the other storage drivers
    #-------------------------------------------------------------------------------
    if declare -f migrate_other >/dev/null; then
        migrate_other "$@"
    fi
fi

MONITOR_TM_MAD=
if ! boolTrue "DS_SHARED"; then
    MONITOR_TM_MAD="$DS_TM_MAD"
fi
if [ ${DS_TM_MAD:0:8} = "storpool" ] && [ "${SP_SYSTEM^^}" = "SSH" ]; then
    MONITOR_TM_MAD="$DS_TM_MAD"
fi
if [ -n "$MONITOR_TM_MAD" ]; then
    #-------------------------------------------------------------------------------
    # Cleanup src VM files from the src host
    #-------------------------------------------------------------------------------
    CMD="$SSH $SRC_HOST 'rm -rf $VM_PATH'"
    splog "$CMD"
    exec_and_log "eval $CMD" "Error removing $VM_PATH"
fi

splog "END $VM_ID"
exit 0
