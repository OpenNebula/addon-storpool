#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015-2024, StorPool (storpool.com)                               #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# mkimage size format host:remote_system_ds/disk.i vmid dsid
#   - size in MB of the image
#   - format for the image
#   - host is the target host to deploy the VM
#   - remote_system_ds is the path for the system datastore in the host
#   - vmid is the id of the VM
#   - dsid is the target datastore (0 is the system datastore)

#-------------------------------------------------------------------------------
# Get mkimage arguments from OpenNebula core
#-------------------------------------------------------------------------------

SIZE="$1"
FSTYPE="$2"
DST="$3"
VM_ID="$4"
DS_ID="$5"

DRIVER_PATH="$(dirname "$0")"
# shellcheck source=tm/storpool/storpool_common.sh
source "${DRIVER_PATH}/storpool_common.sh"

# shellcheck source=/dev/null
source "${DRIVER_PATH}/../../datastore/libfs.sh"

if [[ -f "${DRIVER_PATH}/../../etc/datastore/datastore.conf" ]]; then
    # shellcheck source=/dev/null
    source "${DRIVER_PATH}/../../etc/datastore/datastore.conf"
fi

splog "SIZE=${SIZE} FSTYPE=${FSTYPE} DST=${DST} VM_ID=${VM_ID} DS_ID=${DS_ID}${SUPPORTED_FS:+ SUPPORTED_FS=${SUPPORTED_FS}}${FS_OPTS:+ FS_OPTS=${FS_OPTS}}"

if [[ "${FSTYPE,,}" != "raw" && "${FSTYPE,,}" != "swap" ]]; then
    log_error "Unsupported FSTYPE '${FSTYPE}'! Please use 'raw'."
    splog "Unsupported FSTYPE '${FSTYPE}'! Please use 'raw'."
    exit 1
fi

#-------------------------------------------------------------------------------
# Get template information from datastore TEMPLATE definition
#-------------------------------------------------------------------------------

oneDatastoreInfo "${DS_ID}"

if boolTrue "AUTO_TEMPLATE"; then
    if [[ -z "${SP_PLACEALL}" ]]; then
        error_message "The template of the datastore with ID ${DS_ID} is missing 'SP_PLACEALL' attribute."
        exit 255
    fi
    if [[ -z "${SP_PLACETAIL}" ]]; then
        SP_PLACETAIL="${SP_PLACEALL}"
    fi
    if [[ -n "${SP_REPLICATION}" && "${SP_REPLICATION}" =~ ^[123]+$ || "${SP_REPLICATION}" =~ ^[[:digit:]]+$ ]]; then
        error_message "The template of the datastore with ID ${DS_ID} is with unknown value for 'SP_REPLICATION' attribute (SP_REPLICATION=${SP_REPLICATION})."
        exit 255
    fi
fi

#-------------------------------------------------------------------------------
# Set dst path and dirs
#-------------------------------------------------------------------------------

DST_PATH="$(arg_path "${DST}")"
DST_HOST="$(arg_host "${DST}")"
DST_DIR="$(dirname "${DST_PATH}")"
export DST_DIR  # TBD: remove
DISK_ID="$(echo "${DST}" | awk -F. '{print $NF}' || true)"

oneVmInfo "${VM_ID}" "${DISK_ID}"

if [[ -n "${DRIVER}" && "${DRIVER,,}" != "raw" ]]; then
    log_error "Unsupported DRIVER format '${DRIVER}'! Please use 'raw'."
    splog "Unsupported DRIVER format '${DRIVER}'! Please use 'raw'."
    exit 1
fi

SP_QOSCLASS="${VM_DISK_SP_QOSCLASS:-${VM_SP_QOSCLASS:-${DS_SP_QOSCLASS:-${DEFAULT_QOSCLASS}}}}"
debug_sp_qosclass

#-------------------------------------------------------------------------------
# Create image
#-------------------------------------------------------------------------------

SP_SIZE="${SIZE}M"
SP_VOL="${ONE_PX}-sys-${VM_ID}-${DISK_ID}-${FSTYPE}"
SP_LINK="/dev/storpool/${SP_VOL}"
SP_TEMPLATE="${ONE_PX}-ds-${DS_ID}"
export SP_SIZE  # TBD: remove

storpoolTemplate "${SP_TEMPLATE}"

storpoolVolumeCheck "${SP_VOL}"

storpoolVolumeCreate "${SP_VOL}" "${SIZE}M" "${SP_TEMPLATE}"

if type -t contains &>/dev/null; then
    if contains "${SUPPORTED_FS}" "${FS}" ","; then
        splog "FS:${FS} is SUPPORTED_FS:${SUPPORTED_FS}"
    else
        splog "FS:${FS} not in SUPPORTED_FS:${SUPPORTED_FS}"
        FS=
    fi
else
    FS=
fi

ON_HOST=""
if [[ "${FSTYPE,,}" != "raw" || -n "${FS}" ]]; then
    if [[ "${FSTYPE}" == "swap" ]]; then
        MKFS_CMD="${MKSWAP:-mkswap} -L swap \"${SP_LINK}\""
    else
        if [[ -n "${FS}" ]]; then
            FS_OPTS="$(eval "echo \${FS_OPTS_${FS}}")"
            MKFS_CMD="${MKFS:-mkfs} -F -t \"${FS}\" ${FS_OPTS} \"${SP_LINK}\""
        else
            MKFS_CMD="$(mkfs_command "${SP_LINK}" "${FSTYPE}" "${SIZE}" || true)"
        fi
    fi
    splog "MKFS_CMD=${MKFS_CMD}"

    trapAdd "splog \"return \$? \"; storpoolVolumeDetach \"${SP_VOL}\" \"force\" \"\" \"all\"; storpoolVolumeDelete \"${SP_VOL}\" force snaps"

    storpoolVolumeAttach "${SP_VOL}" "${DST_HOST}"

    splog "ssh_exec_and_log ${DST_HOST} ${MKFS_CMD}"
    ssh_exec_and_log "${DST_HOST}" "${MKFS_CMD}" \
        "Error running ${MKFS_CMD} on ${DST_HOST}"
    ON_HOST="${DST_HOST}"

    trapReset
fi

mode="rw"
type="VOL"
if boolTrue "READONLY"; then
    mode="${READONLY_MODE,,}"
    type="VOLRO"
fi

if [[ -z "${ON_HOST}" ]] || [[ "${mode}" == "ro" ]]; then
    storpoolVolumeAttach "${SP_VOL}" "${DST_HOST}" "${mode}"
fi

storpoolVolumeTag "${SP_VOL}" "virt;${LOC_TAG:-nloc};${VM_TAG:-nvm};${VC_POLICY:+vc-policy};${SP_QOSCLASS:+qc};type" "one;${LOC_TAG_VAL};${VM_ID};${VC_POLICY};${SP_QOSCLASS};${type}"

MONITOR_TM_MAD=""
if ! boolTrue "DS_SHARED"; then
    MONITOR_TM_MAD="storpool"
fi

oneSymlink "${DST_HOST}" "${SP_LINK}" "${DST_PATH}"

splog "END ${VM_ID}"
exit 0
