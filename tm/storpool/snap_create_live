#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015-2020, StorPool (storpool.com)                               #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#-------------------------------------------------------------------------------
# snap_create_live  host:parent_image snap_id vm_id ds_id
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Get snap_create_live arguments from OpenNebula core
#-------------------------------------------------------------------------------

SRC="$1"
SNAP_ID="$2"
VM_ID="$3"
DS_ID="$4"

TM_PATH="$(dirname $0)"
source "${TM_PATH}/storpool_common.sh"

splog "SRC=$SRC SNAP_ID=$SNAP_ID VM_ID=$VM_ID DS_ID=$DS_ID"

SRC_HOST=`arg_host $SRC`
SRC_PATH=`arg_path $SRC`

DISK_ID=$(echo ${SRC##*/} | awk -F. '{print $NF}')

#-------------------------------------------------------------------------------
# Get Datastore information
#-------------------------------------------------------------------------------

oneDatastoreInfo "$(basename "$(dirname "$(dirname "$SRC_PATH")")")"

oneDatastoreInfo "$DS_ID"

#-------------------------------------------------------------------------------
# Get Image information
#-------------------------------------------------------------------------------

oneVmInfo "$VM_ID" "$DISK_ID"

if [ "$TYPE" = "CDROM" ]; then
    source "$TM_PATH/../../scripts_common.sh"
    error_message "${0##*/}: CDROM snapshot operation not supported"
    exit 1
fi

#-------------------------------------------------------------------------------
# Compute the source image
#-------------------------------------------------------------------------------

SP_VOL=${SOURCE##*/}
if boolTrue "CLONE"; then
    SP_VOL+="-${VM_ID}-${DISK_ID}"
fi

SP_SNAP="${SP_VOL}-snap${SNAP_ID}"
DST_HOST=$SRC_HOST
DST_PATH="$SRC_PATH"

#-------------------------------------------------------------------------------
# Check snapshots limits
#-------------------------------------------------------------------------------

if [ -n "$DISKSNAPSHOT_LIMIT" ] && [ "${DISKSNAPSHOT_LIMIT//[[:digit:]]/}" = "" ]; then
    if [ $DISKSNAPSHOT_LIMIT -ge 0 ] ; then
        oneVmDiskSnapshots "$VM_ID" "$DISK_ID"
        if [ ${#DISK_SNAPSHOTS[@]} -gt $DISKSNAPSHOT_LIMIT ]; then
            source "$TM_PATH/../../scripts_common.sh"
            msg="DISKSNAPSHOT_LIMIT of $DISKSNAPSHOT_LIMIT snaphosts exceeded!"
            splog "$msg"
            error_message "$msg"
            exit 1
        fi
    fi
fi

#-------------------------------------------------------------------------------
# Create snapshot
#-------------------------------------------------------------------------------

oneFsfreeze "$DST_HOST" "$DEPLOY_ID"
trapAdd "oneFsthaw \"$DST_HOST\" \"$DEPLOY_ID\""

storpoolSnapshotCreate "$SP_SNAP" "$SP_VOL"

oneFsthaw "$DST_HOST" "$DEPLOY_ID"
trapReset

splog "END $VM_ID"
exit 0
