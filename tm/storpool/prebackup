#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015-2024, StorPool (storpool.com)                               #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

DRIVER_PATH="$(dirname "$0")"

#shellcheck source=/dev/null
source "${DRIVER_PATH}/../../scripts_common.sh"
#shellcheck source=tm/storpool/storpool_common.sh
source "${ONE_LOCATION:-/var/lib/one/remotes}/tm/storpool/storpool_common.sh"

splog "$*"

if [[ -t 0 ]]; then
    msg="Interactive mode not supported"
    splog "${msg}"
    error_message "${msg}"
    exit 1
fi

KVMHOST="${1%%:*}"
VMDIR="${1#*:}"
DISKS="$2"
DEPLOY_ID="$3"
VM_ID="$4"
SYSDS_ID="$5"
if [[ -n "$6" ]]; then
    BJ_ID="$4"
    VM_ID="$5"
    SYSDS_ID="$6"
fi
export BJ_ID  #  TBD: remove

B_DIR="${VMDIR}/backup"

oneHostInfo "${KVMHOST}"

oneDatastoreInfo "${SYSDS_ID}"

umask 077

VM_XML="$(mktemp -t "prebackup-${VM_ID}-XXXXXXXX")"
trapAdd "rm -f \"${VM_XML}\""
cat > "${VM_XML}"

oneVmVolumes "${VM_ID}" "" "${VM_XML}" "${DISKS}"

if [[ -d "${B_DIR}" ]]; then
    splog "pre-clean ${B_DIR} ..."
    snapshots_list="${B_DIR}/.storpool_snapshots"
    if [[ -f "${snapshots_list}" ]]; then
        while read -r -u "${snpfh}" snp; do
            storpoolVolumeDetach "${snp}" "force" "" "all"
            storpoolSnapshotDelete "${snp}"
        done {snpfh}< <(cat "${snapshots_list}" || true)
    fi
    rm -rf "${B_DIR}"
    splog "pre-clean competed ($?)"
fi

mkdir -p "${B_DIR}"
splog "mkdir -p ${B_DIR}"

base64 -w 60 "${VM_XML}" >"${B_DIR}/vm.xml"
splog "base64 VM XML to ${B_DIR}/vm.xml ($?)"

rm -f "${VM_XML}"
trapDel "rm -f \"${VM_XML}\""

declare -A D_ARR
for disk in ${DISKS//:/ }; do
    D_ARR["${disk}"]="${disk}"
done

B_SUFFIX="ONEBACKUP-$(date +%s)"
echo "${B_SUFFIX}" >"${B_DIR}/.snapshot_suffix"
list=()
backups=()
for map in "${vmDisksMap[@]}"; do
    img="${map%:*}"
    did="${map#*:}"
    if [[ -n "${D_ARR["${did}"]}" ]]; then
        snapshot="${img}-${B_SUFFIX}"
        list+=("${img}" "${snapshot}")
        backups+=("${snapshot}:${did}")
        echo "${snapshot}" >>"${B_DIR}/.storpool_snapshots"
    fi
done

storpoolRetry groupSnapshot "tag:${VM_TAG:-nvm}=${VM_ID}" "tag:${LOC_TAG:-nloc}=${LOC_TAG_VAL}" "tag:virt=one" "${list[@]}"

for b in "${backups[@]}"; do
    snap="${b%:*}"
    did="${b#*:}"
    json="{\"snapshot\":\"${snap}\",\"ro\":[\"${HOST_SP_OURID}\"]}"
    storpoolRetry groupAttach "${json}"
    snapPath="/dev/storpool/${snap}"
    dstFile="${B_DIR}/disk.${did}.0"
    RCMD=$(cat <<EOF
umask 077
mkdir -p "${B_DIR}"
qemu-img convert -T none -t none -O qcow2 "${snapPath}" "${dstFile}"
EOF
)
    splog "${KVMHOST}::${RCMD}"
    ssh_forward ssh_exec_and_log "${KVMHOST}" "${RCMD}" "Error extracting ${RCMD} on ${KVMHOST}"
    json="{\"snapshot\":\"${snap}\",\"detach\":\"all\",\"force\":true}"
    storpoolRetry groupDetach "${json}"
done

rsync -a "${B_DIR}/" "${KVMHOST}:${B_DIR}/"
splog "rsync -a ${B_DIR}/ ${KVMHOST}:${B_DIR}/ ($?)"

splog "END"
