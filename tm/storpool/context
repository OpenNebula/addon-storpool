#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015-2024, StorPool (storpool.com)                               #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# context context.sh file1 file2 ... fileN host:remote_system_ds/disk.i vmid dsid
#   - context.sh file are the contents of the context ISO
#   - host is the target host to deploy the VM
#   - remote_system_ds is the path for the system datastore in the host
#   - vmid is the id of the VM
#   - dsid is the target datastore (system)

#-------------------------------------------------------------------------------
# Get context arguments from OpenNebula core
#-------------------------------------------------------------------------------


ARGV=("$@")

DS_ID="${ARGV[$(($#-1))]}"
VM_ID="${ARGV[$(($#-2))]}"
DST="${ARGV[$(($#-3))]}"
SRC=("${ARGV[@]:0:$(($#-3))}")

TM_PATH="$(dirname "$0")"
# shellcheck source=tm/storpool/storpool_common.sh
source "${TM_PATH}/storpool_common.sh"

splog "DS_ID=${DS_ID} VM_ID=${VM_ID} DST=${DST} SRC=${SRC[*]}"

function exit_error()
{
    error_message "${ERROR}"
    splog "${ERROR}"
    [[ -d "${ISO_DIR}" ]] && rm -rf "${ISO_DIR}" > /dev/null 2>&1
    exit 255
}

#-------------------------------------------------------------------------------
# Get Datastore information
#-------------------------------------------------------------------------------

oneDatastoreInfo "${DS_ID}"

if boolTrue "AUTO_TEMPLATE"; then
    if [[ -z "${SP_PLACEALL}" ]]; then
        error_message "The template of the datastore with ID ${DS_ID} is missing 'SP_PLACEALL' attribute."
        exit 255
    fi
    if [[ -z "${SP_PLACETAIL}" ]]; then
        SP_PLACETAIL="${SP_PLACEALL}"
    fi
    if [[ -n "${SP_REPLICATION/[123]/}" || -n "${SP_REPLICATION/[[:digit:]]/}" ]]; then
        error_message "The template of the datastore with ID ${DS_ID} is with unknown value for 'SP_REPLICATION' attribute (SP_REPLICATION=${SP_REPLICATION})."
        exit 255
    fi
fi

#-------------------------------------------------------------------------------
# Set dst path and dirs
#-------------------------------------------------------------------------------

DST_PATH="$(arg_path "${DST}")"
DST_HOST="$(arg_host "${DST}")"
DST_DIR="$(dirname "${DST_PATH}")"

DISK_ID="$(echo "${DST}" | awk -F. '{print $NF}')"

#-------------------------------------------------------------------------------
# Build the Context Block device (locally) and copy it remotely
#-------------------------------------------------------------------------------

log "Generating context block device"

ISO_DIR="${DST_DIR}/.isofiles/${VM_ID}"
ISO_FILE="${ISO_DIR}/${VM_ID}.iso"

exec_and_set_error "mkdir -p ${ISO_DIR}" \
    "Could not create tmp dir to make context dev"
[[ -n "${ERROR}" ]] && exit_error

for f in "${SRC[@]}"; do
    case "${f}" in
    http://*)
        exec_and_set_error "${WGET:-wget} -P '${ISO_DIR}' ${f}" "Error downloading ${f}"
        ;;
    *)
        if echo "${f}" | grep -q ':'; then
            target="$(echo "${f}" | cut -d':' -f2-)"
            target="'${target}'"
            f="$(echo "${f}" | cut -d':' -f1)"
        else
            target=""
        fi

        exec_and_set_error "cp -R ${f} ${ISO_DIR}/${target}" \
            "Error copying ${f} to ${ISO_DIR}"
        ;;
    esac

    [[ -n "${ERROR}" ]] && exit_error
done

oneVmInfo "${VM_ID}" 0

SP_QOSCLASS="${VM_SP_QOSCLASS:-${DS_SP_QOSCLASS:-${DEFAULT_QOSCLASS}}}"
debug_sp_qosclass

if boolTrue "INCLUDE_CONTEXT_PACKAGES"; then
    if [[ -d "/usr/share/one/context" ]]; then
        exec_and_set_error "rsync -a --exclude='*.iso' /usr/share/one/context/* '${ISO_DIR}'/" \
            "Error copying /usr/share/one/context to ${ISO_DIR}"
    fi
fi

exec_and_set_error "${MKISOFS:-mkisofs} -o ${ISO_FILE} -V CONTEXT -J -R ${ISO_DIR}" \
    "Error creating iso fs"
[[ -n "${ERROR}" ]] && exit_error

SP_SIZE="$(du -b "${ISO_FILE}" | cut -f1 || true)"
SP_SIZE="$(( (SP_SIZE +511) /512 *512 ))"
SP_VOL="${ONE_PX}-sys-${VM_ID}-${DISK_ID}-iso"
SP_LINK="/dev/storpool/${SP_VOL}"
SP_TEMPLATE="${ONE_PX}-ds-${DS_ID}"

if storpoolVolumeExists "${SP_VOL}"; then
    storpoolVolumeResize "${SP_VOL}" "${SP_SIZE}" "shrinkOk"
    storpoolTemplate "${SP_TEMPLATE}"
else
    storpoolVolumeCreate "${SP_VOL}" "${SP_SIZE}" "${SP_TEMPLATE}"
fi

#-------------------------------------------------------------------------------
# Import image to the context volume
#-------------------------------------------------------------------------------

storpoolVolumeAttach "${SP_VOL}" "${DST_HOST}"
PIPE_CMD="cat ${ISO_FILE}"
splog "eval ${PIPE_CMD} | ${SSH:-ssh} ${DST_HOST} ${DD:-dd} of=/dev/storpool/${SP_VOL} bs=512k conv=fdatasync status=none iflag=fullblock oflag=direct"
exec_and_log "eval ${PIPE_CMD} | ${SSH:-ssh} ${DST_HOST} ${DD:-dd} of=/dev/storpool/${SP_VOL} bs=512k conv=fdatasync status=none iflag=fullblock oflag=direct" \
            "Error importing ${ISO_FILE} to ${DST_HOST}:/dev/storpool/${SP_VOL}"

#-------------------------------------------------------------------------------
# (re)attach readonly
#------------------------------------------------------------------------------
if [[ "${READONLY_MODE}" == "ro" ]]; then
    storpoolVolumeAttach "${SP_VOL}" "${DST_HOST}" "ro"
fi

if boolTrue "TAG_CONTEXT_ISO"; then
    storpoolVolumeTag "${SP_VOL}" "one;${LOC_TAG_VAL};${VM_ID};${VC_POLICY};${SP_QOSCLASS}" "virt;${LOC_TAG:-nloc};${VM_TAG:-nvm};${VC_POLICY:+vc-policy};${SP_QOSCLASS:+qc}"
fi

MONITOR_TM_MAD=
if ! boolTrue "DS_SHARED"; then
    MONITOR_TM_MAD="storpool"
fi

oneSymlink "${DST_HOST}" "${SP_LINK}" "${DST_PATH}"

#-------------------------------------------------------------------------------
# Remove ISO file and source dir
#-------------------------------------------------------------------------------

rm -rf "${ISO_FILE}" > /dev/null 2>&1
rm -rf "${ISO_DIR}" > /dev/null 2>&1

if boolTrue "FORCE_DETACH_OTHER_CONTEXT"; then
    forceDetachOther "${VM_ID}" "${DST_HOST}"
fi

if [[ -n "${T_OS_NVRAM:-}" ]]; then
    read -r -a t_os_nvram <<< "${T_OS_NVRAM#*:}"
    NVRAM_TEMPLATE="${t_os_nvram[0]#*=}"
    # read -r -a t_arr <<< "${NVRAM_TEMPLATE//\// }"  # TBD: remove
    if [[ "${NVRAM_TEMPLATE#*/}" == "${NVRAM_TEMPLATE}" ]]; then
        NVRAM_TEMPLATE="${OVMF_PATH:-/var/lib/one/remotes/OVMF}/${NVRAM_TEMPLATE}"
    fi
    if [[ -f "${NVRAM_TEMPLATE:-}" ]]; then
        SP_VOL="${ONE_PX}-sys-${VM_ID}-NVRAM"
        SP_LINK="/dev/storpool/${SP_VOL}"
        if ! storpoolVolumeExists "${SP_VOL}"; then
            SIZE=$(stat --printf=%s "${NVRAM_TEMPLATE:-}")
            if [[ -n "${SIZE:-}" ]]; then
                splog "NVRAM_TEMPLATE=${NVRAM_TEMPLATE:-} SIZE=${SIZE:-} // ${T_OS_NVRAM:-}"
                storpoolVolumeCreate "${SP_VOL}" "${SIZE}" "${SP_TEMPLATE}"
                trapAdd "storpoolVolumeDelete \"${SP_VOL}\""
                storpoolVolumeAttach "${SP_VOL}" "${DST_HOST}"
                trapAdd "storpoolVolumeDetach \"${SP_VOL}\" \"force\" \"\" \"all\""
                PIPE_CMD="${DD:-dd} if=\"${NVRAM_TEMPLATE}\" bs=128k status=none conv=fdatasync"
                splog "eval ${PIPE_CMD} | ${SSH:-ssh} ${DST_HOST} ${DD:-dd} of=${SP_LINK} bs=128k conv=fdatasync status=none iflag=fullblock oflag=direct"
                exec_and_log "eval ${PIPE_CMD} | ${SSH:-ssh} ${DST_HOST} ${DD:-dd} of=${SP_LINK} bs=128k conv=fdatasync status=none iflag=fullblock oflag=direct" \
                    "Error importing ${NVRAM_TEMPLATE:-} to ${DST_HOST}:${SP_LINK}"
                trapReset
                storpoolVolumeTag "${SP_VOL}" "one;${LOC_TAG_VAL};${VM_ID};${VC_POLICY};${SP_QOSCLASS}" "virt;${LOC_TAG:-nloc};${VM_TAG:-nvm};${VC_POLICY:+vc-policy};${SP_QOSCLASS:+qc}"

            else
                splog "Can't get the size of ${NVRAM_TEMPLATE:-}!"
            fi
        else
            storpoolVolumeAttach "${SP_VOL}" "${DST_HOST}"
        fi
    else
        splog "NVRAM_TEMPLATE='${NVRAM_TEMPLATE:-}' not found!"
    fi
fi

splog "END ${VM_ID}"
exit 0
