#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015-2024, StorPool (storpool.com)                               #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

DRIVER_PATH="$(dirname "${0}")"
#shellcheck source=/dev/null
source "${DRIVER_PATH}/../../scripts_common.sh"
#shellcheck source=tm/storpool/storpool_common.sh
source "${DRIVER_PATH}/storpool_common.sh"

splog "${*}"

if [[ -t 0 ]]; then
    msg="Interactive mode not supported"
    splog "${msg}"
    error_message "${msg}"
    exit 1
fi

KVMHOST="${1%%:*}"
VMDIR="${1#*:}"
DISKS="$2"
DEPLOY_ID="$3"
VM_ID="$4"
SYSDS_ID="$5"
if [[ -n "$6" ]]; then
    BJ_ID="$4"
    VM_ID="$5"
    SYSDS_ID="$6"
fi
export DISKS BJ_ID

B_DIR="${VMDIR}/backup"

oneDatastoreInfo "${SYSDS_ID}"

oneHostInfo "${KVMHOST}"

VM_XML="$(mktemp -t "postbackup-${VM_ID}-XXXXXXXX")"
trapAdd "rm -f \"${VM_XML}\""
cat > "${VM_XML}"

if [[ -d "${B_DIR}" ]]; then
    splog "post-clean ${B_DIR} ..."
    snapshots_list="${B_DIR}/.storpool_snapshots"
    if [[ -f "${snapshots_list}" ]]; then
        while read -r -u "${snpfd}" snp; do
            storpoolVolumeDetach "${snp}" "force" "" "all"
            storpoolSnapshotDelete "${snp}"
        done {snpfd}< <(cat "${snapshots_list}" || true)
    fi
    rm -rf "${B_DIR}"
    splog "post-clean completed ($?)"
else
    splog "Folder not found. ${B_DIR}"
fi

RCMD=$(cat <<EOF
rm -rf "${B_DIR}"
EOF
)
splog "${KVMHOST}::${RCMD}"
ssh_forward ssh_exec_and_log "${KVMHOST}" "${RCMD}" "Error extracting ${RCMD} on ${KVMHOST}"

splog "END"
