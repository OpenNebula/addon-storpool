#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015, StorPool (storpool.com)                                    #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#-------------------------------------------------------------------------------
# clone fe:SOURCE host:remote_system_ds/disk.i size
#-------------------------------------------------------------------------------

function splog() { logger -t "tm_sp_${0##*/}" "$*"; }

#-------------------------------------------------------------------------------
# Set up the environment to source common tools
#-------------------------------------------------------------------------------

if [ -n "${ONE_LOCATION}" ]; then
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
else
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
fi

DRIVER_PATH=$(dirname $0)

source $TMCOMMON

#-------------------------------------------------------------------------------
# Get clone arguments from OpenNebula core
#-------------------------------------------------------------------------------

SRC=$1
DST=$2
VM_ID=$3
DS_ID=$4

splog "SRC=$SRC DST=$DST VM_ID=$VM_ID DS_ID=$DS_ID"

DST_HOST=`arg_host $DST`
DST_PATH=`arg_path $DST`
DST_DIR=`dirname $DST_PATH`

#-------------------------------------------------------------------------------
# Compute the destination image name
#-------------------------------------------------------------------------------


DISK_ID=$(echo ${DST##*/} | awk -F. '{print $NF}')
SRC_PATH=`arg_path $SRC`
SP_PARENT=${SRC_PATH##*/}
SP_SNAP="${SRC_PATH##*/}-${DISK_ID}"
SP_VOL="${SP_PARENT}-${VM_ID}-${DISK_ID}"
SP_TEMPLATE="${SRC_PATH%%/*}"

onevm show -x $VM_ID 2>&1 >/tmp/tm_sp_${0##*/}-vm${VM_ID}-disk${DISK_ID}.xml

#-------------------------------------------------------------------------------
# Get Image information
#-------------------------------------------------------------------------------

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i XPATH_ELEMENTS

while IFS= read -r -d '' element; do
        XPATH_ELEMENTS[i++]="$element"
        done < <(onevm show -x $VM_ID| $XPATH  \
                            /VM/STATE \
                            /VM/LCM_STATE \
                            /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/SOURCE \
                            /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/IMAGE_ID \
                            /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/IMAGE \
                            /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/CLONE \
                            /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/PERSISTENT)
unset i
VMSTATE="${XPATH_ELEMENTS[i++]}"
LCM_STATE="${XPATH_ELEMENTS[i++]}"
SOURCE="${XPATH_ELEMENTS[i++]}"
IMAGE_ID="${XPATH_ELEMENTS[i++]}"
IMAGE="${XPATH_ELEMENTS[i++]}"
CLONE="${XPATH_ELEMENTS[i++]}"
PERSISTENT="${XPATH_ELEMENTS[i++]}"

splog "\
${VMSTATE:+VMSTATE=$VMSTATE }\
${LCM_STATE:+LCM_STATE=$LCM_STATE }\
${SOURCE:+SOURCE=$SOURCE }\
${IMAGE_ID:+IMAGE_ID=$IMAGE_ID }\
${CLONE:+CLONE=$CLONE }\
${PERSISTENT:+PERSISTENT=$PERSISTENT }\
${IMAGE:+IMAGE=$IMAGE }\
"

#-------------------------------------------------------------------------------
# Clone the image
#-------------------------------------------------------------------------------

SP_LINK="/dev/storpool/$SP_VOL"

CLONE_CMD=$(cat <<EOF
    set -e
    export PATH=/sbin:/usr/sbin/:$PATH
    splog(){ logger -t tm_sp_${0##*/} "\$*"; }

    if storpool volume "$SP_VOL" info &>/dev/null; then
        splog "delete $SP_VOL (non-persistent volume)"
        storpool volume "$SP_VOL" delete "$SP_VOL"
    fi

    splog "volume $SP_VOL baseOn $SP_PARENT template $SP_TEMPLATE"
    storpool volume "$SP_VOL" baseOn "$SP_PARENT" template "$SP_TEMPLATE"

    splog "attach volume $SP_VOL here"
    storpool attach volume "$SP_VOL" here

    t=15
    while [ ! -L "$SP_LINK" ]; do
        if [ \$t -lt 1 ]; then
            splog "Timeout waiting for $SP_LINK"
            echo "Timeout waiting for $SP_LINK" >&2
            exit -1
        fi
        sleep .5
        t=\$((t-1))
    done

    mkdir -p "$DST_DIR"

    if [ -L "$DST_PATH" ]; then
        splog "$DST_PATH exists. Cleanup"
        rm -f "$DST_PATH"
    fi

    splog "ln -sf $SP_LINK $DST_PATH"
    ln -sf "$SP_LINK" "$DST_PATH"

    splog "END CLONE_CMD"
EOF
)

splog "run CLONE_CMD on $DST_HOST"
ssh_exec_and_log "$DST_HOST" "$CLONE_CMD" \
                 "Error cloning $SP_SNAP to $SP_VOL in $DST_HOST"

splog "END"
exit 0
