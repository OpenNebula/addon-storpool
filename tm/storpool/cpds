#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015, StorPool (storpool.com)                                    #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#-------------------------------------------------------------------------------
# cpds host:SOURCE host:DEST vmId datastoreId
#-------------------------------------------------------------------------------

function splog() { logger -t "tm_sp_${0##*/}" "$*"; }

#-------------------------------------------------------------------------------
# Set up the environment to source common tools
#-------------------------------------------------------------------------------

if [ -n "${ONE_LOCATION}" ]; then
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
else
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
fi

DRIVER_PATH=$(dirname $0)

source $TMCOMMON

SRC=$1
DST=$2
VM_ID=$3
DS_ID=$4

splog "SRC=$SRC DST=$DST VM_ID=$VM_ID DS_ID=$DS_ID"

SRC_HOST=`arg_host $SRC`
SRC_PATH=`arg_path $SRC`

#-------------------------------------------------------------------------------
# Compute the destination image name
#-------------------------------------------------------------------------------

SRC_PATH=`arg_path $SRC`
SP_SRC=${SRC_PATH##*/}

DISK_ID=$(echo $SRC | awk -F. '{print $NF}')
SP_DST="${SP_SRC}-${VM_ID}-${DISK_ID}"
splog "DISK_ID=$DISK_ID SP_DST=$SP_DST
"
#-------------------------------------------------------------------------------
# Get Image information
#-------------------------------------------------------------------------------

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i XPATH_ELEMENTS

while IFS= read -r -d '' element; do
        XPATH_ELEMENTS[i++]="$element"
        done < <(onevm show -x $VM_ID| $XPATH  \
                            /VM/STATE \
                            /VM/LCM_STATE \
                            /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/SOURCE \
                            /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/IMAGE_ID \
                            /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/IMAGE \
                            /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/CLONE \
                            /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/PERSISTENT \
                            /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/HOTPLUG_SAVE_AS \
                            /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/HOTPLUG_SAVE_AS_ACTIVE \
                            /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/HOTPLUG_SAVE_AS_SOURCE)

unset i

VMSTATE="${XPATH_ELEMENTS[i++]}"
LCM_STATE="${XPATH_ELEMENTS[i++]}"
SOURCE="${XPATH_ELEMENTS[i++]}"
IMAGE_ID="${XPATH_ELEMENTS[i++]}"
IMAGE="${XPATH_ELEMENTS[i++]}"
CLONE="${XPATH_ELEMENTS[i++]}"
PERSISTENT="${XPATH_ELEMENTS[i++]}"
HOTPLUG_SAVE_AS="${XPATH_ELEMENTS[i++]}"
HOTPLUG_SAVE_AS_ACTIVE="${XPATH_ELEMENTS[i++]}"
HOTPLUG_SAVE_AS_SOURCE="${XPATH_ELEMENTS[i++]}"

onevm show -x $VM_ID 2>&1 >/tmp/tm_sp_${0##*/}-${VM_ID}-${DISK_ID}.xml

splog "\
${VMSTATE:+VMSTATE=$VMSTATE }\
${LCM_STATE:+LCM_STATE=$LCM_STATE }\
${SOURCE:+SOURCE=$SOURCE }\
${IMAGE_ID:+IMAGE_ID=$IMAGE_ID }\
${CLONE:+CLONE=$CLONE }\
${PERSISTENT:+PERSISTENT=$PERSISTENT }\
${IMAGE:+IMAGE=$IMAGE }\
"
msg="${HOTPLUG_SAVE_AS:+HOTPLUG_SAVE_AS=$HOTPLUG_SAVE_AS }${HOTPLUG_SAVE_AS_ACTIVE:+HOTPLUG_SAVE_AS_ACTIVE=$HOTPLUG_SAVE_AS_ACTIVE }${HOTPLUG_SAVE_AS_SOURCE:+HOTPLUG_SAVE_AS_SOURCE=$HOTPLUG_SAVE_AS_SOURCE }"
[ -n "$msg" ] && splog "$msg"

SP_VOL="${HOTPLUG_SAVE_AS_SOURCE##*/}"
SP_PARENT="${SOURCE##*/}"
[ "$PERSISTENT" = "YES" ] || SP_PARENT="${SP_PARENT}-${VM_ID}-${DISK_ID}"

#-------------------------------------------------------------------------------
# Take snapshot of the image
#-------------------------------------------------------------------------------

CPDS_CMD=$(cat <<EOF
    set -e
    export PATH=/bin:/sbin:/usr/bin:/usr/sbin/:$PATH
    splog(){ logger -t tm_sp_${0##*/} "\$*"; }

    splog "volume $SP_VOL baseOn $SP_PARENT"
    storpool volume "$SP_VOL" baseOn "$SP_PARENT"

    splog "END CPDS_CMD"
EOF
)

splog "run CPDS_CMD on $SRC_HOST"
ssh_exec_and_log "$SRC_HOST" "$CPDS_CMD" \
                 "Error snapshoting $SP_VOL to $SP_SNAP"

splog "END"
exit 0
