#!/bin/bash
#

# -------------------------------------------------------------------------- #
# Copyright 2016-2025, StorPool (storpool.com)                               #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

function splog() { logger -t "tm_sp_${0##*/}" "[$$] $*"; }

DISK="$1"
DS_ID="$2"
VM_ID="$3"
DRIVER="$4"

DRIVER_PATH="${0%/*}"

SP_JSON_PATH="/tmp"
SP_SPACE_USED_LVMWAY=""
SP_VOLUME_SPACE_JSON="storpool_volume_usedSpace.json"
SP_CMD_VOLUME_SPACE="cat _SP_JSON_PATH_/_SP_VOLUME_SPACE_JSON_"
SP_SNAPSHOT_SPACE_JSON="storpool_snapshot_space.json"
SP_CMD_SNAPSHOT_SPACE="cat _SP_JSON_PATH_/_SP_SNAPSHOT_SPACE_JSON_"


if [[ -f "${DRIVER_PATH}/../../addon-storpoolrc" ]]; then
    # shellcheck source=addon-storpoolrc
	source "${DRIVER_PATH}/../../addon-storpoolrc"
fi
if [[ -f "/etc/storpool/addon-storpool.conf" ]]; then
    # shellcheck source=/dev/null
	source "/etc/storpool/addon-storpool.conf"
fi

DS_NAME="${ONE_PX:-one}-ds-${DS_ID}"
export DS_NAME

function boolTrue()
{
   case "${!1^^}" in
       1|Y|YES|T|TRUE|ON)
           return 0
           ;;
       *)
           return 1
   esac
}

DISK_LINK="$(readlink "${DISK}" || true)"
DISK_DEV="$(readlink -f "${DISK}" || true)"
if boolTrue "DDEBUG_TM_MONITOR_DISK"; then
	splog "[DD] ${PWD} ${DISK} ${DS_ID} ${VM_ID} ${DRIVER} ${DISK_DEV} ${DISK_LINK}"
	[[ -d "${SP_DS_TMP:-}" ]] && splog "[DD] found SP_DS_TMP:${SP_DS_TMP}"
fi

if [[ -z "${DISK_LINK}" || -n "${DISK_LINK%/dev/storpool*}" ]]; then
	if boolTrue "DDEBUG_TM_MONITOR_DISK"; then
		splog "[DD] ${DISK} NOT on storpool! ${DISK_LINK}"
	fi
	"${0}-misc" "${DISK}" "${DS_ID}" "${VM_ID}"
	exit $?
else
	if boolTrue "DDEBUG_TM_MONITOR_DISK"; then
		splog "[DD] ${DISK} StorPool volume ${DISK_LINK}"
	fi
fi

DISK_ID="${DISK##*\.}"
spVolume=${DISK_LINK#/dev/storpool/}

declare -a columns_a
if boolTrue "SP_SPACE_USED_LVMWAY" "${SP_SPACE_USED_LVMWAY}"; then
	used="storedSize"
	columns_a=("data" "other")
else
	used="spaceUsed"
	columns_a=("other" "data")
fi

function getSnapId()
{
    local name="$1" spVolume="$2"
    snap_id=""
    [[ "${name}" == "${name#"${spVolume}-snap"}" ]] || snap_id="${name#*snap}"
    [[ -z "${snap_id//[0-9]/}" ]] || snap_id=""
}

#"name",storedSize,spaceUsed
if [[ -f "${SP_DS_TMP}/sizes" ]]; then
	#if boolTrue "DDEBUG_TM_MONITOR_DISK"; then
	#	splog "[DD] walking $SP_DS_TMP/sizes for volume $spVolume"
	#fi
	while IFS=',' read -r -u "${grepfh}" name "${columns_a[@]}"; do
		name=${name//\"/}
		if [[ -n "${disk_size}" ]]; then
            getSnapId "${name}" "${spVolume}"
#			snap_id=${name#*snap}
            [[ "${name}" == "${name#"${spVolume}-snap"}" ]] && snap_id="" || snap_id="${name#*snap}"
            [[ -z "${snap_id//[0-9]/}" ]] || snap_id=
			if [[ -n "${snap_id}" ]]; then
				if [[ "${snap_id}" == "${name}" ]]; then
					if boolTrue "DDEBUG_TM_MONITOR_DISK"; then
						splog "[DD] skipping ${name} looking for *snap"
					fi
					continue
				fi
				snap_size=$((data/1024/1024))
				if boolTrue "DEBUG_TM_MONITOR_DISK"; then
					# shellcheck disable=SC2154
					splog "[D] ${DISK} ID:${DISK_ID} SNAP:${snap_id} SIZE:${snap_size} ($((other/1024/1024))) snapshot:${name}"
				fi
				echo -n " SNAPSHOT_SIZE=[ID=${snap_id},DISK_ID=${DISK_ID},SIZE=${snap_size}]"
			else
				if boolTrue "DDEBUG_TM_MONITOR_DISK"; then
					splog "[DD] skipping ${name} looking for <volume>-snap<N>"
				fi
			fi
		else
			if [[ "${spVolume}" == "${name}" ]]; then
				disk_size="${data:-0}"
				disk_size=$((disk_size/1024/1024))
				if [[ "${disk_size}" == "0" ]] && [[ -n "${data}" ]] && [[ "${data}" -gt "0" ]]; then
					disk_size=1
				fi
				if boolTrue "DEBUG_TM_MONITOR_DISK"; then
					splog "[D] ${DISK} ID:${DISK_ID} SIZE:${disk_size} ($((other/1024/1024))) volume:${name}"
				fi
				echo -n " DISK_SIZE=[ID=${DISK_ID},SIZE=${disk_size}]"
			else
				splog "skip ${name} looking for ${spVolume}"
			fi
		fi
	done {grepfh}< <(grep -F "${spVolume}" "${SP_DS_TMP}/sizes" || true)
	exec {grepfh}<&-
	exit
else
	if boolTrue "DEBUG_TM_MONITOR_DISK"; then
		splog "[D] ${DRIVER}:${DISK} not found ${SP_DS_TMP}/sizes"
	fi
fi

# expand SP_CMD_VOLUME_SPACE macro variables
SP_CMD_VOLUME_SPACE="${SP_CMD_VOLUME_SPACE//_DATASTORE_ID_/${DS_ID}}"
SP_CMD_VOLUME_SPACE="${SP_CMD_VOLUME_SPACE//_CLUSTER_ID_/${CLUSTER_ID}}"
SP_CMD_VOLUME_SPACE="${SP_CMD_VOLUME_SPACE//_SP_API_HTTP_HOST_/${SP_API_HTTP_HOST}}"
SP_CMD_VOLUME_SPACE="${SP_CMD_VOLUME_SPACE//_SP_VOLUME_SPACE_JSON_/${SP_VOLUME_SPACE_JSON}}"
SP_CMD_VOLUME_SPACE="${SP_CMD_VOLUME_SPACE//_SP_JSON_PATH_/${SP_JSON_PATH}}"

# expand SP_CMD_SNAPSHOT_SPACE macro variables
SP_CMD_SNAPSHOT_SPACE="${SP_CMD_SNAPSHOT_SPACE//_DATASTORE_ID_/${DS_ID}}"
SP_CMD_SNAPSHOT_SPACE="${SP_CMD_SNAPSHOT_SPACE//_CLUSTER_ID_/${CLUSTER_ID}}"
SP_CMD_SNAPSHOT_SPACE="${SP_CMD_SNAPSHOT_SPACE//_SP_API_HTTP_HOST_/${SP_API_HTTP_HOST}}"
SP_CMD_SNAPSHOT_SPACE="${SP_CMD_SNAPSHOT_SPACE//_SP_SNAPSHOT_SPACE_JSON_/${SP_SNAPSHOT_SPACE_JSON}}"
SP_CMD_SNAPSHOT_SPACE="${SP_CMD_SNAPSHOT_SPACE//_SP_JSON_PATH_/${SP_JSON_PATH}}"

if boolTrue "DDEBUG_TM_MONITOR_DISK"; then
	splog "[DD] SP_CMD_VOLUME_SPACE:${SP_CMD_VOLUME_SPACE}"
fi
spSize=$(eval "${SP_CMD_VOLUME_SPACE}" 2>/dev/null | jq -r ".data | map( select( .name==\"${spVolume}\" ) ) | .[] | [.${used}] | @csv" 2>/dev/null || true)

disk_size="${spSize:-0}"
disk_size=$((disk_size/1024/1024))
if [[ "${disk_size}" == "0" ]] && [[ -n "${spSize}" ]] && [[ "${spSize}" -gt "0" ]]; then
	disk_size=1
fi
if boolTrue "DEBUG_TM_MONITOR_DISK"; then
	splog "[D] ${DISK} ID:${DISK_ID} SIZE:${disk_size} (${used})"
fi
echo -n " DISK_SIZE=[ID=${DISK_ID},SIZE=${disk_size}]"

while IFS=',' read -r -u "${jqfh}" name spaceUsed storedSize; do
	name=${name//\"/}
    snap_size="${!used}"
    getSnapId "${name}" "${spVolume}"
    if [[ -z "${snap_id}" ]]; then
        if boolTrue "DEBUG_TM_MONITOR_DISK"; then
            splog "[D] Skipping ${DISK} ID:${DISK_ID} snapshot ${name} (${used}) spaceUsed:${spaceUsed} storedSize:${storedSize}"
        fi
        continue
    fi
	snap_size=$((snap_size/1024/1024))
	if boolTrue "DEBUG_TM_MONITOR_DISK"; then
		splog "[D] ${DISK} ID:${DISK_ID} SNAP:${snap_id} (${name}) SIZE:${snap_size} (${used}) spaceUsed:${spaceUsed} storedSize:${storedSize}"
	fi
	echo -n " SNAPSHOT_SIZE=[ID=${snap_id},DISK_ID=${DISK_ID},SIZE=${snap_size}]"
done {jqfh}< <(eval "${SP_CMD_SNAPSHOT_SPACE}" 2>/dev/null | \
		jq -r --arg n "${spVolume}-snap" ".data | map( select( .name | contains(\$n) ) ) | .[] | [.name, .spaceUsed, .storedSize] | @csv" \
		| sort || true)
exec {jqfh}<&-
