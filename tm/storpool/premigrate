#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015-2020, StorPool (storpool.com)                               #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
# Portions copyright Asociacion Clubs Baloncesto (acb.com)                   #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#-------------------------------------------------------------------------------
# premigrate srcHost dstHost vmPath vmId datasourceId template
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Get premigrate arguments from OpenNebula core
#-------------------------------------------------------------------------------

SRC_HOST="$1"
DST_HOST="$2"
VM_PATH="$3"
VM_ID="$4"
DS_ID="$5"
TEMPLATE="$6"
SYSTEM_MAD="$7"

TM_PATH="`dirname $0`"
for _PATH in "$TM_PATH/"{,..,../..,../../..}/storpool; do
    if [ -f "${_PATH}/storpool_common.sh" ]; then
        source "${_PATH}/storpool_common.sh"
        break;
    fi
done

if [ ! -t 0 ]; then
    tmpxml="$(mktemp -t premigrate-${VM_ID}-XXXXXXXX)"
    trapAdd "rm -rf \"$tmpxml\""
    cat > "$tmpxml"
    if [ -s "$tmpxml" ]; then
        SYSTEM_MAD="$6"
        TEMPLATE="$tmpxml"
    fi
fi

if [ "${SYSTEM_MAD:0:8}" = "storpool" ]; then
    if boolTrue "DEBUG_MIGRATE_LIVE"; then
        splog "SRC_HOST=$SRC_HOST DST_HOST=$DST_HOST VM_PATH=$VM_PATH VM_ID=$VM_ID DS_ID=$DS_ID SYSTEM_MAD=$SYSTEM_MAD (exit)"
    fi
    exit 0
fi

splog "SRC_HOST=$SRC_HOST DST_HOST=$DST_HOST VM_PATH=$VM_PATH VM_ID=$VM_ID DS_ID=$DS_ID SYSTEM_MAD=$SYSTEM_MAD ${tmpxml:+$tmpxml}"

#-------------------------------------------------------------------------------
# Get SYSTEM Datastore information
#-------------------------------------------------------------------------------
oneDatastoreInfo "$DS_ID"

MONITOR_TM_MAD=
if ! boolTrue "DS_SHARED"; then
    MONITOR_TM_MAD="$DS_TM_MAD"
fi
if [ ${DS_TM_MAD:0:8} = "storpool" ] && [ "${SP_SYSTEM^^}" = "SSH" ]; then
    MONITOR_TM_MAD="$DS_TM_MAD"
    oneVmVolumes "$VM_ID"
    if [ -n "$vmVolumes" ]; then
        if [ -n "$oneVmVolumesNotStorPool" ]; then
            msg="Unsupported configuration! SYSTEM datastore not on shared filesystem and non-storpool disks! ($oneVmVolumesNotStorPool)"
        fi
    else
        msg="Can't get VM disk info!"
    fi
    if [ -n "$msg" ]; then
        splog "$msg"
        log_error "$msg"
        exit 1
    fi
fi
if [ -n "$MONITOR_TM_MAD" ]; then
    #-------------------------------------------------------------------------------
    # Create DST path
    #-------------------------------------------------------------------------------
    ssh_make_path "$DST_HOST" "$VM_PATH" "$MONITOR_TM_MAD"

    #-------------------------------------------------------------------------------
    # Copy VM related content to dst host.
    #-------------------------------------------------------------------------------
    TAR_SSH=$(cat <<EOF
set -e -o pipefail
logger -t "tm_sp_premigrate_r[\$\$]" -- "$TAR -C $VM_PATH --sparse -cf - . | $SSH $DST_HOST '$TAR -C $VM_PATH --sparse -xf -'"
$TAR -C "$VM_PATH" --sparse -cf - . | $SSH "$DST_HOST" '$TAR -C "$VM_PATH" --sparse -xf -'
ret=\$?
logger -t "tm_sp_premigrate_r[\$\$]" -- "END $VM_ID (\$ret)"
exit \$ret
EOF
)
    splog "Copy $VM_PATH from $SRC_HOST to $DST_HOST (ssh)"
    ssh_exec_and_log "$SRC_HOST" "eval $TAR_SSH" "Error copying VM directory to target host $VM_PATH"
fi

#-------------------------------------------------------------------------------
# Get VM information
#-------------------------------------------------------------------------------
oneTemplateInfo "$TEMPLATE"

#-------------------------------------------------------------------------------
# Attach storpool volumes
#-------------------------------------------------------------------------------
for i in ${!DISK_ID_ARRAY[@]}; do
    if [ "${DISK_TM_MAD_ARRAY[i]}" = "storpool" ]; then
        DISK_ID="${DISK_ID_ARRAY[i]}"
        DISK_SOURCE="${DISK_SOURCE_ARRAY[i]}"
        if [ -n "$DISK_SOURCE" ]; then
            SP_VOL="${DISK_SOURCE##*/}"
            if boolTrue "DISK_CLONE_ARRAY[i]"; then
                SP_VOL+="-${VM_ID}-${DISK_ID_ARRAY[i]}"
            elif [ "${DISK_TYPE_ARRAY[i]}" = "CDROM" ]; then
                CDROM_VOL="${SP_VOL}-${VM_ID}-${DISK_ID}"
                if ! storpoolVolumeExists "$CDROM_VOL"; then
                    storpoolVolumeClone "$SP_VOL" "$CDROM_VOL" "$SP_TEMPLATE"
                    storpoolVolumeTag "$CDROM_VOL" "CDROM" "type"
                fi
                SP_VOL="$CDROM_VOL"
            fi
            if boolTrue "DISK_READONLY_ARRAY[i]"; then
                SP_MODE="ro"
            else
                SP_MODE=
            fi
            SP_LINK="/dev/storpool/$SP_VOL"
            DST_PATH="$VM_PATH/disk.${DISK_ID}"
            storpoolVolumeAttach "$SP_VOL" "$DST_HOST" "$SP_MODE"
#           oneSymlink "$DST_HOST" "$SP_LINK" "$DST_PATH"
        else
            if boolTrue "DEBUG_MIGRATE_LIVE"; then
                splog "skip volatile disk for $DS_ID/$VM_ID/disk.${DISK_ID}"
            fi
        fi
    fi
done

if [ "${DS_TM_MAD:0:8}" = "storpool" ]; then
    #-------------------------------------------------------------------------------
    # Attach volatile disk volumes
    #-------------------------------------------------------------------------------
    for i in ${!DISK_ID_ARRAY[@]}; do
        if [ "${DISK_TM_MAD_ARRAY[i]}" = "" ] || [ "${DISK_SOURCE_ARRAY[i]}" = "" ]; then
            FORMAT="${DISK_FORMAT_ARRAY[i]:-raw}"
            DISK_ID="${DISK_ID_ARRAY[i]}"
            if [ ${DISK_TYPE_ARRAY[i]} = "swap" ]; then
                FORMAT="swap"
            fi
            SP_VOL="${ONE_PX}-sys-${VM_ID}-${DISK_ID}-${FORMAT}"
            SP_LINK="/dev/storpool/$SP_VOL"
            DST_PATH="${VM_PATH}/disk.${DISK_ID}"
            storpoolVolumeAttach "$SP_VOL" "$DST_HOST"
#            oneSymlink "$DST_HOST" "$SP_LINK" "$DST_PATH"
        fi
    done

    #-------------------------------------------------------------------------------
    # Attach context ISO volume
    #-------------------------------------------------------------------------------
    if [ -n "$_CONTEXT_DISK_ID" ]; then
        SP_VOL="${ONE_PX}-sys-${VM_ID}-${_CONTEXT_DISK_ID}-iso"
        SP_LINK="/dev/storpool/$SP_VOL"
        DST_PATH="$VM_PATH/disk.${_CONTEXT_DISK_ID}"
        storpoolVolumeAttach "$SP_VOL" "$DST_HOST" "ro"
#        oneSymlink "$DST_HOST" "$SP_LINK" "$DST_PATH"
    fi

    #-------------------------------------------------------------------------------
    # Call the other storage drivers
    #-------------------------------------------------------------------------------
    if declare -f migrate_other >/dev/null; then
        migrate_other "$@"
    fi
fi

splog "END $VM_ID"
exit 0
