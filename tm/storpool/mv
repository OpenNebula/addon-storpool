#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015-2020, StorPool (storpool.com)                               #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#-------------------------------------------------------------------------------
# mv host:remote_datastore/disk.i host:remote_datastore/disk.i vmId datastoreId
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Get mv arguments from OpenNebula core
#-------------------------------------------------------------------------------

SRC="$1"
DST="$2"
VM_ID="$3"
DS_ID="$4"

TM_PATH="$(dirname $0)"
source "${TM_PATH}/storpool_common.sh"

splog "SRC=$SRC DST=$DST VM_ID=$VM_ID DS_ID=$DS_ID"

#-------------------------------------------------------------------------------
# Process source and destination
#-------------------------------------------------------------------------------
SRC_PATH=`arg_path $SRC`
SRC_HOST=`arg_host $SRC`
DST_PATH=`arg_path $DST`
DST_HOST=`arg_host $DST`
DST_DIR=`dirname $DST_PATH`

DISK_ID=$(echo "$DST_PATH" | $AWK -F. '{print $NF}')
IS_DISK=`is_disk $DST_PATH`

#-------------------------------------------------------------------------------
# Get Datastore information
#-------------------------------------------------------------------------------
if [ $IS_DISK == 0 ] && [ "$SRC_PATH" != "$DST_PATH" ]; then
    SRC_DS_ID="$(basename $(dirname $SRC_PATH))"
    oneDatastoreInfo "$SRC_DS_ID"
    SRC_DS_SHARED="$DS_SHARED"
    SRC_SP_SYSTEM="$SP_SYSTEM"
    splog "SRC_DS_ID=$SRC_DS_ID SRC_DS_SHARED=$SRC_DS_SHARED SRC_SP_SYSTEM=$SRC_SP_SYSTEM"
fi

oneDatastoreInfo "$DS_ID"

#-------------------------------------------------------------------------------
# Get VM information
#-------------------------------------------------------------------------------
oneVmInfo "$VM_ID" "$DISK_ID"

SP_VOL="${SOURCE##*/}"
if boolTrue "CLONE"; then
    SP_VOL+="-${VM_ID}-${DISK_ID}"
fi

SP_LINK="/dev/storpool/$SP_VOL"
SP_TEMPLATE="${SOURCE%%/*}"

log "vm $VM_ID moving $SRC to $DST"

# is checkpoint on storpool enabled?
case "$SP_CHECKPOINT" in
    nomigrate)
        SP_CHECKPOINT="yes"
    ;;
    *)
        if boolTrue "SP_CHECKPOINT"; then
            SP_CHECKPOINT="migrate"
        else
            SP_CHECKPOINT=
            CHECKPOINT_SAVE=
            CHECKPOINT_RESTORE=
        fi
    ;;
esac

MIGRATE_UNKNOWN=
DETACH_ALL=
DO_SYMLINK=
SKIP_CONTEXT=
DO_CONTEXT=yes
IS_UNDEPLOY=
case "$LCM_STATE" in
    8)
        #-----------------------------------------------------------------------
        # migrate checkpoint on PROLOG_MIGRATE
        #-----------------------------------------------------------------------
        if [ "$SP_CHECKPOINT" = "migrate" ]; then
            CHECKPOINT_SAVE="yes"
            CHECKPOINT_RESTORE="yes"
        fi
    ;;
    9)
        #-----------------------------------------------------------------------
        # only attach and restore checkpoint on PROLOG_RESUME
        #-----------------------------------------------------------------------
        ATTACH_ONLY="ATTACH_ONLY (LCM_STATE=$LCM_STATE PROLOG_RESUME)"
        if [ -n "$SP_CHECKPOINT" ]; then
            CHECKPOINT_RESTORE="yes"
        fi
        if boolTrue "SKIP_UNDEPLOY_SSH"; then
            IS_UNDEPLOY=1
        fi
        DO_SYMLINK="yes"
    ;;
    10)
        #-----------------------------------------------------------------------
        # only detach and save checkpoint on EPILOG_STOP
        #-----------------------------------------------------------------------
        DETACH_ONLY="DETACH_ONLY (LCM_STATE=$LCM_STATE EPILOG_STOP)"
        if [ -n "$SP_CHECKPOINT" ]; then
            CHECKPOINT_SAVE="yes"
        fi
        # apply Undeploy logic on Suspend -> Stop
        if boolTrue "SKIP_UNDEPLOY_SSH"; then
            IS_UNDEPLOY=1
        fi
    ;;
    30)
        #-----------------------------------------------------------------------
        # only detach (all clients) on EPILOG_UNDEPLOY
        #-----------------------------------------------------------------------
        DETACH_ONLY="DETACH_ONLY (LCM_STATE=$LCM_STATE EPILOG_UNDEPLOY)"
        DETACH_ALL="all"
        IS_UNDEPLOY=1
    ;;
    31)
        #-----------------------------------------------------------------------
        # only attach and (re)create symlinks on PROLOG_UNDEPLOY
        #-----------------------------------------------------------------------
        ATTACH_ONLY="ATTACH_ONLY (LCM_STATE=$LCM_STATE PROLOG_UNDEPLOY)"
        DO_SYMLINK="yes"
        DO_CONTEXT="no"
        IS_UNDEPLOY=1
    ;;
    6[01])
        #-----------------------------------------------------------------------
        # detach from all and attach to dst on PROLOG_MIGRATE_UNKNOWN[_FAILURE]
        #-----------------------------------------------------------------------
        MIGRATE_UNKNOWN="yes"
        DETACH_ALL="all"
        DO_SYMLINK="yes"
    ;;
    *)
        splog ">>> STATE=$VMSTATE LCM_STATE=$LCM_STATE <<<"
    ;;
esac


#-------------------------------------------------------------------------------
# check if it is called in SYSTEM_DS context
#-------------------------------------------------------------------------------
if [ "$DS_TEMPLATE_TYPE" = "SYSTEM_DS" ]; then
    REMOTE_MONITOR=
    if ! boolTrue "DS_SHARED" || [ "${SP_SYSTEM^^}" = "SSH" ]; then
        REMOTE_MONITOR="storpool"
    fi
    if [ $LCM_STATE -eq 30 ] && boolTrue "SKIP_UNDEPLOY_SSH"; then
        splog "Skip ssh_make_path $DST_HOST $DST_DIR $REMOTE_MONITOR (front-end)"
        if [ "$DST_HOST" = "$HOSTNAME" ]; then
            [ -d "$DST_DIR" ] || mkdir -p "$DST_DIR"
            monitor_file="$DST_DIR/.monitor"
            [ -f "$monitor_file" ] && monitor=$(<"$monitor_file")
            if [ -n "$REMOTE_MONITOR" ] ; then
                if [ "$REMOTE_MONITOR" != "$monitor" ]; then
                    echo "$REMOTE_MONITOR" >"$monitor_file"
                    splog "Wrote $REMOTE_MONITOR to $monitor_file ($?)"
                fi
            else
                if [ -n "$monitor" ]; then
                    rm -f "$monitor_file"
                    splog "Removed $monitor_file '$monitor' ($?)"
                fi
            fi
        fi
    else
        if [ $LCM_STATE -eq 10 ] && boolTrue "SKIP_UNDEPLOY_SSH"; then
            splog "Skip ssh_make_path $DST_HOST $DST_DIR $REMOTE_MONITOR // EPILOG_STOP (front-end)"
        else
            if boolTrue "IS_DISK"; then
                ssh_make_path "$DST_HOST" "$DST_DIR" "$REMOTE_MONITOR"
            else
                ssh_make_path "$DST_HOST" "$DST_PATH" "$REMOTE_MONITOR"
            fi
        fi
    fi
    TEMPLATE= #`onevm show -x "$VM_ID" | base64 -w0`
    oneTemplateInfo "$TEMPLATE"
    if [ $IS_DISK == 0 ]; then
        # checkpoint
        if [ -n "$CHECKPOINT_SAVE" ]; then
            oneCheckpointSave "$SRC"
        fi
        if [ -n "$CHECKPOINT_RESTORE" ]; then
            oneCheckpointRestore "$DST"
        fi
        # context ISO. Do detach/attach only when hosts differ
        if boolTrue "DO_CONTEXT"; then
            if [ -n "$_CONTEXT_DISK_ID" ]; then
                SP_VOL="${ONE_PX}-sys-${VM_ID}-${_CONTEXT_DISK_ID}-iso"
                if [ "$SRC_HOST" != "$DST_HOST" ]; then
                    SP_LINK="/dev/storpool/$SP_VOL"
                    CTX_PATH="$DST_DIR/${VM_ID}/disk.${_CONTEXT_DISK_ID}"
                    if [ -n "$ATTACH_ONLY" ]; then
                        splog "$ATTACH_ONLY"
                    else
                        storpoolVolumeDetach "$SP_VOL" "force" "$SRC_HOST" "$DETACH_ALL"
                    fi
                    if [ -n "$DETACH_ONLY" ]; then
                        splog "$DETACH_ONLY"
                    else
                        storpoolVolumeAttach "$SP_VOL" "$DST_HOST" "ro"
                        if boolTrue "DO_SYMLINK"; then
                            oneSymlink "$DST_HOST" "$SP_LINK" "$CTX_PATH"
                        fi
                    fi
                fi
            fi
            if [ "$SRC_PATH" != "$DST_PATH" ]; then
                storpoolVolumeTemplate "$SP_VOL" "${ONE_PX}-ds-$DS_ID"
            fi
        fi
        # other files in the VM home
        SRC_DS_DIR=`dirname  $SRC_PATH`
        SRC_VM_DIR=`basename $SRC_PATH`
        SYSTEM_DS_TRANSFER=
        if [ -n "$SRC_SP_SYSTEM" ]; then
            if [ "${SRC_SP_SYSTEM^^}" = "SSH" ] || [ "${SRC_DS_SHARED^^}" != "YES" ]; then
                SYSTEM_DS_TRANSFER=1
            fi
        fi
        if ! boolTrue "DS_SHARED" || [ "${SP_SYSTEM^^}" = "SSH" ] || [ -n "$SYSTEM_DS_TRANSFER" ]; then
            if [ "$SRC_HOST" = "$DST_HOST" ] || boolTrue "MIGRATE_UNKNOWN"; then
                if [ "$SRC_PATH" = "$DST_PATH" ]; then
                    splog "VM $VM_ID on same path($SRC_PATH)${MIGRATE_UNKNOWN:+ MIGRATE_UNKNOWN}"
                else
                    splog "datastore change $SRC_PATH -> $DST_PATH"
                    ssh_exec_and_log "$DST_HOST" "mv -n -t $DST_PATH $SRC_PATH/*" \
                        "Failed moving $SRC_PATH/* to $DST_PATH"
                fi
            else
                if boolTrue "IS_UNDEPLOY" && boolTrue "SKIP_UNDEPLOY_SSH"; then
                    splog "Transfer from $SRC_HOST:$SRC_PATH to $DST_HOST:$DST_DIR/$SRC_VM_DIR SKIPPED"
                    if [ $LCM_STATE -eq 30 ] && boolTrue "CLEAN_SRC_ON_UNDEPLOY"; then
                        splog "Claenup $SRC_HOST:$SRC_PATH"
                        ssh_exec_and_log "$SRC_HOST" "rm -rf \"$SRC_PATH\"" "Error deleting $SRC_PATH from $SRC_HOST!"
                    fi
                else
                    TAR_SSH=$(cat <<EOF
set -e -o pipefail
if [ -d "$SRC_PATH" ]; then
  logger -t "tm_sp_mv_r[\$\$]" -- "$TAR -C $SRC_DS_DIR --sparse -cf - $SRC_VM_DIR | $SSH $DST_HOST '$TAR -C $DST_DIR --sparse -xf -'"
  $TAR -C "$SRC_DS_DIR" --sparse -cf - "$SRC_VM_DIR" | $SSH "$DST_HOST" '$TAR -C "$DST_DIR" --sparse -xf -'
  ret=\$?
  if [ \$ret -eq 0 ]; then
      logger -t "tm_sp_mv_r[\$\$]" -- "rm -rf $SRC_PATH"
      rm -rf "$SRC_PATH"
  else
      logger -t "tm_sp_mv_r[\$\$]" -- "Error copying data! ret:\$ret"
  fi
else
  logger -t "tm_sp_mv_r[\$\$]" -- "Nothing to transfer: $SRC_HOST:$SRC_PATH not found."
  ret=0
fi
logger -t "tm_sp_mv_r[\$\$]" -- "END $VM_ID (\$ret)"
exit \$ret
EOF
)
                    splog "Transfering $SRC_HOST:$SRC_PATH to $DST_HOST:$DST_DIR/$SRC_VM_DIR"
                    ssh_exec_and_log "$SRC_HOST" "eval $TAR_SSH" "Error transferring SYSTEM_DS from $SRC_HOST to $DST_HOST"
                fi
            fi
        fi
     else
        for i in ${!DISK_ID_ARRAY[@]}; do
            if [ "${DISK_TM_ARRAY[i]}" = "" ]; then
                DISK_PATH="$DST_PATH"
                FORMAT="${DISK_FORMAT_ARRAY[i]:-raw}"
                if [ ${DISK_TYPE_ARRAY[i]} = "swap" ]; then
                    FORMAT="swap"
                fi
                if boolTrue "IS_DISK"; then
                    if [ "${DISK_ID_ARRAY[i]}" != "$DISK_ID" ] ; then
                        continue
                    fi
                else
                    DISK_PATH="${DST_PATH}/disk.${DISK_ID_ARRAY[i]}"
                fi
                SP_VOL="${ONE_PX}-sys-${VM_ID}-${DISK_ID_ARRAY[i]}-${FORMAT}"
                SP_LINK="/dev/storpool/$SP_VOL"
                if [ -n "$ATTACH_ONLY" ]; then
                    splog "$ATTACH_ONLY"
                else
                    storpoolVolumeDetach "$SP_VOL" "force" "$SRC_HOST" "$DETACH_ALL"
                fi
                if [ -n "$DETACH_ONLY" ]; then
                    splog "$DETACH_ONLY"
                else
                    storpoolVolumeAttach "$SP_VOL" "$DST_HOST"

                    storpoolVolumeTag "$SP_VOL" "$VM_ID"

                    if boolTrue "DO_SYMLINK"; then
                        oneSymlink "$DST_HOST" "$SP_LINK" "$DST_PATH"
                    fi
                fi
                if [ "$SRC_PATH" != "$DST_PATH" ]; then
                    storpoolVolumeTemplate "$SP_VOL" "${ONE_PX}-ds-$DS_ID"
                fi
            fi
        done
     fi
     splog "END $VM_ID [SYSTEM_DS]"
     exit 0
else
    if [ -n "$ATTACH_ONLY" ]; then
        splog "$ATTACH_ONLY"
    else
        if boolTrue "MIGRATE_UNKNOWN"; then
            if boolTrue "MV_DETACH_ALL"; then
                oneVmVolumes "$VM_ID"
            else
                vmVolumes=
            fi
        fi
        if [ "$TYPE" = "CDROM" ]; then
            # backward compatibility ...
            storpoolVolumeDetach "$SP_VOL" "" "$SRC_HOST" "" "$READONLY"
            SP_VOL="${SP_VOL}-${VM_ID}-${DISK_ID}"
        fi
        storpoolVolumeDetach "$SP_VOL" "force" "$SRC_HOST" "$DETACH_ALL" "$READONLY" "$vmVolumes"
    fi
fi

#-------------------------------------------------------------------------------
# Do nothing on EPILOG_STOP, EPILOG_UNDEPLOY
#-------------------------------------------------------------------------------

if [ -n "$DETACH_ONLY" ]; then
    splog "END $VM_ID $DETACH_ONLY [IMAGE_DS]"
    exit 0
fi

#-------------------------------------------------------------------------------
# Enable the destination device
#-------------------------------------------------------------------------------

SP_VOL="${SOURCE##*/}"
if boolTrue "CLONE"; then
    SP_VOL+="-${VM_ID}-${DISK_ID}"
elif [ "$TYPE" = "CDROM" ]; then
    CDROM_VOL="${SP_VOL}-${VM_ID}-${DISK_ID}"
    if ! storpoolVolumeExists "$CDROM_VOL"; then
        if booltTrue "$NO_VOLUME_TEMPLATE" "NO_VOLUME_TEMPLATE"; then
            SP_TEMPLATE_CD=
        else
            SP_TEMPLATE_CD="${ONE_PX}-ds-$DS_ID"
        fi
        storpoolVolumeClone "$SP_VOL" "$CDROM_VOL" "$SP_TEMPLATE_CD"
        storpoolVolumeTag "$CDROM_VOL" "CDROM" "type"
    fi
    SP_MODE="ro"
    SP_VOL="$CDROM_VOL"
fi

SP_LINK="/dev/storpool/$SP_VOL"

storpoolVolumeAttach "$SP_VOL" "$DST_HOST" "$SP_MODE"

storpoolVolumeTag "$SP_VOL" "$VM_ID"

if boolTrue "DO_SYMLINK"; then
    # Get SYSTEM datastore info
    oneDatastoreInfo "$VM_DS_ID"
    MONITOR_TM_MAD=
    if ! boolTrue "DS_SHARED"; then
        MONITOR_TM_MAD="$VM_TM_MAD"
    fi
    if [ "${VM_TM_MAD:0:8}" = "storpool" ] && [ "${SP_SYSTEM^^}" = "SSH" ]; then
        MONITOR_TM_MAD="$VM_TM_MAD"
    fi
    oneSymlink "$DST_HOST" "$SP_LINK" "$DST_PATH"
fi

splog "END $VM_ID [IMAGE_DS]"
exit 0
