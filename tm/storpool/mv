#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015, StorPool (storpool.com)                                    #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#-------------------------------------------------------------------------------
# mv host:remote_datastore/disk.i host:remote_datastore/disk.i vmId datastoreId
#-------------------------------------------------------------------------------

TM_PATH="$(dirname $0)"

source "${TM_PATH}/storpool_common.sh"

#-------------------------------------------------------------------------------
# Get mv arguments from OpenNebula core
#-------------------------------------------------------------------------------
SRC=$1
DST=$2
VM_ID=$3
DS_ID=$4

splog "SRC=$SRC DST=$DST VM_ID=$VM_ID DS_ID=$DS_ID"

#-------------------------------------------------------------------------------
# Process source and destination
#-------------------------------------------------------------------------------
SRC_PATH=`arg_path $SRC`
SRC_HOST=`arg_host $SRC`
DST_PATH=`arg_path $DST`
DST_HOST=`arg_host $DST`
DST_DIR=`dirname $DST_PATH`

DISK_ID=$(echo "$DST_PATH" | $AWK -F. '{print $NF}')
IS_DISK=`is_disk $DST_PATH`

#default detach action
DETACH_ACTION="DETACH"

#-------------------------------------------------------------------------------
# Get Datastore information
#-------------------------------------------------------------------------------
oneDatastoreInfo "$DS_ID"

#-------------------------------------------------------------------------------
# Get VM information
#-------------------------------------------------------------------------------
oneVmInfo "$VM_ID" "$DISK_ID"

SP_VOL="${SOURCE##*/}"
[ -n "$PERSISTENT" ] || SP_VOL="${SP_VOL}-${VM_ID}-${DISK_ID}"
SP_LINK="/dev/storpool/$SP_VOL"
SP_TEMPLATE="${SOURCE%%/*}"

log "vm $VM_ID moving $SRC to $DST"

#-------------------------------------------------------------------------------
# run only DETACH_CMD on EPILOG_STOP, EPILOG_UNDEPLOY
#-------------------------------------------------------------------------------
if [ $LCM_STATE = "10" ]; then
    DETACH_ONLY="END (LCM_STATE=$LCM_STATE EPILOG_STOP)"
fi
if [ $LCM_STATE = "30" ]; then
    DETACH_ONLY="END (LCM_STATE=$LCM_STATE EPILOG_UNDEPLOY)"
fi
#-------------------------------------------------------------------------------
# run only ATTACH_CMD on PROLOG_UNDEPLOY
#-------------------------------------------------------------------------------
if [ $LCM_STATE = "31" ]; then
    ATTACH_ONLY="(LCM_STATE=$LCM_STATE PROLOG_UNDEPLOY)"
fi
#-------------------------------------------------------------------------------
# run DETACH on DST host on PROLOG_MIGRATE_UNKNOWN
#-------------------------------------------------------------------------------
if [ $LCM_STATE = "60" ]; then
    DETACH_ACTION="DETACH_VIA_DST"
fi

#-------------------------------------------------------------------------------
# check if it is called in SYSTEM_DS context
#-------------------------------------------------------------------------------
if [ "$DS_TEMPLATE_TYPE" = "SYSTEM_DS" ]; then
    ssh_make_path "$DST_HOST" "$DST_DIR"
    TEMPLATE=`onevm show -x "$VM_ID" | base64 -w0`
    oneTemplateInfo "$TEMPLATE"
    if [ $IS_DISK == 0 ]; then
        #context ISO
        SP_VOL="one-sys-${VM_ID}-${_CONTEXT_DISK_ID}-iso"
        DST_PATH="$DST_DIR/${VM_ID}/disk.${_CONTEXT_DISK_ID}"
        if [ -n "$ATTACH_ONLY" ]; then
            splog "$ATTACH_ONLY"
        else
            storpoolAction "$DETACH_ACTION" "$SRC_HOST" "$DST_HOST" "$SP_VOL"
        fi
        if [ -n "$DETACH_ONLY" ]; then
            splog "$DETACH_ONLY"
        else
            EXTRA_CMD="ln -sf \"$DST_HOST\" \"${DST_HOST}.iso\""
            storpoolAction "ATTACH" "$SRC_HOST" "$DST_HOST" "$SP_VOL" "$DST_PATH"
        fi

        SRC_DS_DIR=`dirname  $SRC_PATH`
        SRC_VM_DIR=`basename $SRC_PATH`
        if [ $DS_SHARED != "YES" ] || [ "$SP_SYSTEM" = "ssh" ]; then
            if [ "$SRC_HOST" = "$DST_HOST" ]; then
                splog "VM $VM_ID on same host($SRC_HOST)"
            else
                TAR_COPY="$SSH $SRC_HOST '$TAR -C $SRC_DS_DIR --sparse -cf - $SRC_VM_DIR'"
                TAR_COPY="$TAR_COPY | $SSH $DST_HOST '$TAR -C $DST_DIR --sparse -xf -'"
                splog "Copy $SRC_HOST:$SRC_PATH $DST_HOST:$DST_DIR/$SRC_VM_DIR"
                exec_and_log "eval $TAR_COPY" "Error copying SYSTEM_DS from $SRC_HOST to $DST_HOST"

                splog "Cleanup $SRC_HOST rm -rf $SRC_PATH"
                ssh_exec_and_log "$SRC_HOST" "rm -rf $SRC_PATH" \
                         "failed removing $SRC_HOST $SRC_PATH"
            fi
        fi
     else
        for i in ${!DISK_ID_ARRAY[@]}; do
            if [ "${DISK_TM_ARRAY[i]}" = "" ]; then
                FORMAT="${DISK_FORMAT_ARRAY[i]}"
                if [ ${DISK_TYPE_ARRAY[i]} = "swap" ]; then
                    FORMAT="swap"
                fi
                if [ $IS_DISK == 1 ]; then
                    if [ "${DISK_ID_ARRAY[i]}" != "$DISK_ID" ] ; then
                        continue
                    fi
                else
                    DST_PATH+="/disk.${DISK_ID_ARRAY[i]}"
                fi
                SP_VOL="one-sys-${VM_ID}-${DISK_ID_ARRAY[i]}-${FORMAT}"
                if [ -n "$ATTACH_ONLY" ]; then
                    splog "$ATTACH_ONLY"
                else
                    storpoolAction "$DETACH_ACTION" "$SRC_HOST" "$DST_HOST" "$SP_VOL"
                fi
                if [ -n "$DETACH_ONLY" ]; then
                    splog "$DETACH_ONLY"
                else
                    storpoolAction "ATTACH" "$SRC_HOST" "$DST_HOST" "$SP_VOL" "$DST_PATH"
                fi
            fi
        done
     fi
     splog "END"
     exit 0
else
    if [ -n "$ATTACH_ONLY" ]; then
        splog "$ATTACH_ONLY"
    else
        storpoolAction "$DETACH_ACTION" "$SRC_HOST" "$DST_HOST" "$SP_VOL" "$DST_PATH"
    fi
fi

#-------------------------------------------------------------------------------
# Do nothing on EPILOG_STOP, EPILOG_UNDEPLOY
#-------------------------------------------------------------------------------

if [ -n "$DETACH_ONLY" ]; then
    splog "END $DETACH_ONLY"
    exit 0
fi

#-------------------------------------------------------------------------------
# Enable the destination device
#-------------------------------------------------------------------------------

SP_VOL="${SOURCE##*/}"
[ -n "$PERSISTENT" ] || SP_VOL+="-${VM_ID}-${DISK_ID}"

storpoolAction "ATTACH" "$SRC_HOST" "$DST_HOST" "$SP_VOL" "$DST_PATH"

splog "END"
exit 0
