#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015, StorPool (storpool.com)                                    #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#-------------------------------------------------------------------------------
# mv host:remote_datastore/disk.i host:remote_datastore/disk.i vmId datastoreId
#-------------------------------------------------------------------------------

function splog() { echo "$(date) $0 $*" >>/tmp/tm_sp_${0##*/}; logger -t "tm_sp_${0##*/}" "$*"; }

function mvRemote()
{
    local _SRC_HOST="$1" _DST_HOST="$2" _SP_VOL="$3" _DST_PATH="$4" _DETACH_ONLY="$5"
    splog "_SRC_HOST=$_SRC_HOST _DST_HOST=$_DST_HOST _SP_VOL=$_SP_VOL _DST_PATH=$_DST_PATH"
    _SP_LINK="/dev/storpool/$_SP_VOL"
    _DST_DIR="${_DST_PATH%%disk*}"
    splog "_DST_DIR=$_DST_DIR _DST_PATH=$_DST_PATH"

    _DETACH_CMD=$(cat <<EOF
    set -e
    export PATH=/bin:/usr/bin:/sbin:/usr/sbin:\$PATH
    splog(){ logger -t tm_sp_${0##*/} "[mvRemote] \$*"; }

    if storpool attach list | grep -q " $_SP_VOL " &>/dev/null; then
        splog "detach volume $_SP_VOL all"
        storpool detach volume "$_SP_VOL" all
    else
        splog "volume not attached $_SP_VOL"
    fi
EOF
)

    _ATTACH_CMD=$(cat <<EOF
    set -e
    export PATH=/bin:/usr/bin:/sbin:/usr/sbin:\$PATH
    splog(){ logger -t tm_sp_${0##*/} "[mvRemote] \$*"; }

    splog "attach volume $_SP_VOL here"
    storpool attach volume "$_SP_VOL" here

    trap 'storpool detach volume "$_SP_VOL" here' EXIT TERM INT HUP

    t=15
    while [ ! -L "$_SP_LINK" ]; do
        if [ \$t -lt 1 ]; then
            splog "Timeout waiting for $_SP_LINK"
            echo "Timeout waiting for $_SP_LINK" >&2
            exit -1
        fi
        sleep .5
        t=\$((t-1))
    done

    if [ -d "$_DST_DIR" ]; then
        splog "rm -f $_DST_PATH"
        rm -f "$_DST_PATH"
    else
        splog "mkdir -p $_DST_DIR"
        mkdir -p "$_DST_DIR"
    fi

    splog "ln -s $_SP_LINK $_DST_PATH"
    ln -s "$_SP_LINK" "$_DST_PATH"

    trap - EXIT TERM INT HUP

#    splog "END ATTACH_CMD"
EOF
)

    splog "run _DETACH_CMD on $_SRC_HOST ($_DST_PATH)"
    ssh_exec_and_log "$_SRC_HOST" "$_DETACH_CMD" \
                 "Error detaching $_SP_VOL from $_SRC_HOST($_DST_PATH)"

    if [ -n "$_DETACH_ONLY" ]; then
        splog "Only Detach: $_DETACH_ONLY"
    else
        splog "run _ATTACH_CMD on $_DST_HOST ($_DST_PATH)"
        ssh_exec_and_log "$_DST_HOST" "$_ATTACH_CMD" \
                 "Error attaching $_SP_VOL to $_DST_HOST($_DST_PATH)"
    fi
#    splog "_END_MVREMOTE"
}

#-------------------------------------------------------------------------------
# Set up the environment to source common tools
#-------------------------------------------------------------------------------

if [ -n "${ONE_LOCATION}" ]; then
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
else
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
fi

DRIVER_PATH=$(dirname $0)

source $TMCOMMON

#-------------------------------------------------------------------------------
# Get mv arguments from OpenNebula core
#-------------------------------------------------------------------------------

SRC=$1
DST=$2
VM_ID=$3
DS_ID=$4

splog "SRC=$SRC DST=$DST VM_ID=$VM_ID DS_ID=$DS_ID"

#-------------------------------------------------------------------------------
# Process source and destination
#-------------------------------------------------------------------------------

SRC_PATH=`arg_path $SRC`
SRC_HOST=`arg_host $SRC`
DST_PATH=`arg_path $DST`
DST_HOST=`arg_host $DST`
DST_DIR=`dirname $DST_PATH`


#-------------------------------------------------------------------------------
# Get Image information
#-------------------------------------------------------------------------------

DISK_ID=$(echo "$DST_PATH" | $AWK -F. '{print $NF}')
IS_DISK=`is_disk $DST_PATH`
#splog "DISK_ID=$DISK_ID IS_DISK=$IS_DISK"

onevm show -x $VM_ID 2>&1 >/tmp/tm_sp_${0##*/}-vm${VM_ID}-disk${DISK_ID}.xml

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onevm show -x $VM_ID| $XPATH \
                    /VM/STATE \
                    /VM/LCM_STATE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/SOURCE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/IMAGE_ID \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/IMAGE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/CLONE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/PERSISTENT)

unset i
VMSTATE="${XPATH_ELEMENTS[i++]}"
LCM_STATE="${XPATH_ELEMENTS[i++]}"
SOURCE="${XPATH_ELEMENTS[i++]}"
IMAGE_ID="${XPATH_ELEMENTS[i++]}"
IMAGE="${XPATH_ELEMENTS[i++]}"
CLONE="${XPATH_ELEMENTS[i++]}"
PERSISTENT="${XPATH_ELEMENTS[i++]}"

#-------------------------------------------------------------------------------
# Get Datastore type
#-------------------------------------------------------------------------------

unset i XPATH_ELEMENTS
while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onedatastore show -x $DS_ID| $XPATH \
                    /DATASTORE/TEMPLATE/TYPE)
unset i
DS_TYPE="${XPATH_ELEMENTS[i++]}"

splog "\
${DS_TYPE:+DS_TYPE=$DS_TYPE }\
${VMSTATE:+VMSTATE=$VMSTATE }\
${LCM_STATE:+LCM_STATE=$LCM_STATE }\
${SOURCE:+SOURCE=$SOURCE }\
${CLONE:+CLONE=$CLONE }\
${PERSISTENT:+PERSISTENT=$PERSISTENT }\
${IMAGE_ID:+IMAGE_ID=$IMAGE_ID }\
${IMAGE:+IMAGE=$IMAGE }\
"

log "vm $VM_ID moving $SRC to $DST"

#-------------------------------------------------------------------------------
# run only DETACH_CMD on EPILOG_STOP, EPILOG_UNDEPLOY
#-------------------------------------------------------------------------------

if [ $LCM_STATE = "10" ]; then
    DETACH_ONLY="END (LCM_STATE=$LCM_STATE EPILOG_STOP)"
fi
if [ $LCM_STATE = "30" ]; then
    DETACH_ONLY="END (LCM_STATE=$LCM_STATE EPILOG_UNDEPLOY)"
fi

#-------------------------------------------------------------------------------
# check if it is called in SYSTEM_DS context
#-------------------------------------------------------------------------------
#if [ "${DST_PATH%[[:digit:]]}" = "$DST_PATH" ]; then
if [ "$DS_TYPE" = "SYSTEM_DS" ]; then

    ssh_make_path "$DST_HOST" "$DST_DIR"


    # onevm show 6 -x | ./xpath_multi.py -s /VM/TEMPLATE/DISK/DISK_ID /VM/TEMPLATE/DISK/TYPE /VM/CONTEXT/DISK_ID /VM/TEMPLATE/DISK/CLUSTER_ID
    unset i XPATH_ELEMENTS
    XPATH="${DRIVER_PATH}/../../datastore/xpath_multi.py -s"

    while read -r element; do
        XPATH_ELEMENTS[i++]="$element"
    done < <(onevm show -x $VM_ID| $XPATH \
                           /VM/TEMPLATE/DISK/DISK_ID \
                           /VM/TEMPLATE/DISK/TYPE \
                           /VM/TEMPLATE/DISK/TM_MAD \
                           /VM/TEMPLATE/DISK/FORMAT \
                           /VM/CONTEXT/DISK_ID )
    unset i
    TDISK_ID=${XPATH_ELEMENTS[i++]}
    TDISK_TYPE=${XPATH_ELEMENTS[i++]}
    TDISK_TM=${XPATH_ELEMENTS[i++]}
    TDISK_FORMAT=${XPATH_ELEMENTS[i++]}
    CONTEXT_DISK_ID=${XPATH_ELEMENTS[i++]}

    OLDIFS=$IFS
    IFS=";"
    DISK_ID_ARRAY=($TDISK_ID)
    DISK_TYPE_ARRAY=($TDISK_TYPE)
    DISK_TM_ARRAY=($TDISK_TM)
    DISK_FORMAT_ARRAY=($TDISK_FORMAT)
    IFS=$OLDIFS

    if [ $IS_DISK == 0 ]; then
        SP_VOL="one-sys-${VM_ID}-${CONTEXT_DISK_ID}-iso"
        mvRemote "$SRC_HOST" "$DST_HOST" "$SP_VOL" "$DST_DIR/disk.${CONTEXT_DISK_ID}" "$DETACH_ONLY"

        SRC_DS_DIR=`dirname  $SRC_PATH`
        SRC_VM_DIR=`basename $SRC_PATH`

        TAR_COPY="$SSH $SRC_HOST '$TAR -C $SRC_DS_DIR --sparse -cf - $SRC_VM_DIR'"
        TAR_COPY="$TAR_COPY | $SSH $DST_HOST '$TAR -C $DST_DIR --sparse -xf -'"

        splog "Copy $SRC_HOST:$SRC_VM_DIR $DST_HOST:$DST_DIR"
        exec_and_log "eval $TAR_COPY" "Error copying SYSTEM_DS from $SRC_HOST to $DST_HOST"

        splog "Cleanup $SRC_HOST rm -rf $SRC_PATH"
        ssh_exec_and_log "$SRC_HOST" "rm -rf $SRC_PATH" \
                         "failed removing $SRC_HOST $SRC_PATH"
    else
        for i in ${!DISK_ID_ARRAY[@]}; do
            if [ "${DISK_TM_ARRAY[i]}" = "" ]; then
                FORMAT="${DISK_FORMAT_ARRAY[i]}"
                if [ ${DISK_TYPE_ARRAY[i]} = "swap" ]; then
                    FORMAT="swap"
                fi
#                splog "volatile $i ${DISK_ID_ARRAY[i]} ${DISK_TYPE_ARRAY[i]} $FORMAT ${DISK_TM_ARRAY[i]}"
                if [ $IS_DISK == 1 ]; then
                    if [ "${DISK_ID_ARRAY[i]}" != "$DISK_ID" ] ; then
#                        splog "skip ${DISK_ID_ARRAY[i]} != $DISK_ID"
                        continue
                    fi
                fi
                SP_VOL="one-sys-${VM_ID}-${DISK_ID_ARRAY[i]}-${FORMAT}"
                mvRemote "$SRC_HOST" "$DST_HOST" "$SP_VOL" "$DST_PATH" "$DETACH_ONLY"
            fi
        done
    fi
else
    # IMAGE_DS
    SP_VOL="${SOURCE##*/}"
    [ -n "$PERSISTENT" ] || SP_VOL="${SP_VOL}-${VM_ID}-${DISK_ID}"

    mvRemote "$SRC_HOST" "$DST_HOST" "$SP_VOL" "$DST_PATH" "$ATTACH"
fi

splog "END"
exit 0
