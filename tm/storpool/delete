#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015, StorPool (storpool.com)                                    #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#-------------------------------------------------------------------------------
# delete host:remote_system_ds/disk.i vmId datastoreId
#-------------------------------------------------------------------------------

function splog() { logger -t "tm_sp_${0##*/}" "$*"; }

#-------------------------------------------------------------------------------
# Set up the environment to source common tools
#-------------------------------------------------------------------------------

DST=$1
VM_ID=$2
DS_ID=$3

splog "DST=$DST VM_ID=$VM_ID DS_ID=$DS_ID"

if [ -n "${ONE_LOCATION}" ]; then
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
else
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
fi

DRIVER_PATH=$(dirname $0)

source $TMCOMMON

#-------------------------------------------------------------------------------
# Process destination
#-------------------------------------------------------------------------------

DST_PATH=`arg_path $DST`
DST_HOST=`arg_host $DST`

#-------------------------------------------------------------------------------
# Delete and exit if directory
#-------------------------------------------------------------------------------

if [ `is_disk $DST_PATH` -eq 0 ]; then
    log "Deleting $DST_PATH on $DST_HOST"
    ssh_exec_and_log "$DST_HOST" "rm -rf $DST_PATH" "Error deleting $DST_PATH"
    exit 0
fi

#-------------------------------------------------------------------------------
# Get Image information
#-------------------------------------------------------------------------------

DISK_ID=$(echo "$DST_PATH" | $AWK -F. '{print $NF}')

onevm show -x $VM_ID 2>&1 >/tmp/tm_sp_${0##*/}-vm${VM_ID}-disk${DISK_ID}.xml

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onevm show -x $VM_ID| $XPATH \
                    /VM/STATE \
                    /VM/LCM_STATE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/SOURCE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/IMAGE_ID \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/IMAGE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/CLONE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/PERSISTENT)

unset i
VMSTATE="${XPATH_ELEMENTS[i++]}"
LCM_STATE="${XPATH_ELEMENTS[i++]}"
SOURCE="${XPATH_ELEMENTS[i++]}"
IMAGE_ID="${XPATH_ELEMENTS[i++]}"
IMAGE="${XPATH_ELEMENTS[i++]}"
CLONE="${XPATH_ELEMENTS[i++]}"
PERSISTENT="${XPATH_ELEMENTS[i++]}"
splog "\
${VMSTATE:+VMSTATE=$VMSTATE }\
${LCM_STATE:+LCM_STATE=$LCM_STATE }\
${SOURCE:+SOURCE=$SOURCE }\
${IMAGE_ID:+IMAGE_ID=$IMAGE_ID }\
${CLONE:+CLONE=$CLONE }\
${PERSISTENT:+PERSISTENT=$PERSISTENT }\
${IMAGE:+IMAGE=$IMAGE }\
"

# No need to delete no cloned images
#if [ "$CLONE" = "NO" ]; then
#    splog "EXIT CLONE=$CLONE"
#    exit 0
#fi

# cloned, so the name will be "<pool>/one-<imageid>-<vmid>-<diskid>"
SP_VOL="${SOURCE##*/}"
[ -n "$PERSISTENT" ] || SP_VOL="${SP_VOL}-${VM_ID}-${DISK_ID}"

#-------------------------------------------------------------------------------
# Delete the device
#-------------------------------------------------------------------------------

log "Deleting $DST_PATH"

# Note that this command, as opposed to the rest of $RBD commands in this set of
# drivers, is executed in the worker node and not in the CEPH frontend.

DELETE_CMD=$(cat <<EOF
    set -e
    export PATH=/bin:/usr/bin:/sbin:/usr/sbin:\$PATH
    splog(){ logger -t tm_sp_${0##*/} "\$*"; }

    if [ -L "$DST_PATH" ]; then
        splog "rm -f $DST_PATH"
        rm -f "$DST_PATH"
    fi

    if storpool attach list | grep -q " $SP_VOL " &>/dev/null; then
        splog "detach volume $SP_VOL all"
        storpool detach volume $SP_VOL all
    fi

    if [ "$PERSISTENT" != "YES" ]; then
        if storpool volume "$SP_VOL" info &>/dev/null; then
            splog "delete volume $SP_VOL (non-persistent)"
            storpool volume "$SP_VOL" delete "$SP_VOL"
        fi
    fi

    splog "END DELETE_CMD"
EOF
)

splog "run DELETE_CMD on $DST_HOST"
ssh_exec_and_log "$DST_HOST" "$DELETE_CMD" \
                 "Error deleting $SP_VOL in $DST_HOST($DST_PATH)"

splog "END"
exit 0
