#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015, StorPool (storpool.com)                                    #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#-------------------------------------------------------------------------------
# delete host:remote_system_ds/disk.i vmId datastoreId
#-------------------------------------------------------------------------------

function splog() { logger -t "tm_sp_${0##*/}" "$*"; }

#-------------------------------------------------------------------------------
# Set up the environment to source common tools
#-------------------------------------------------------------------------------

DST=$1
VM_ID=$2
DS_ID=$3

splog "DST=$DST VM_ID=$VM_ID DS_ID=$DS_ID"

if [ -n "${ONE_LOCATION}" ]; then
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
else
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
fi

DRIVER_PATH=$(dirname $0)

source $TMCOMMON

#-------------------------------------------------------------------------------
# Process destination
#-------------------------------------------------------------------------------

DST_PATH=`arg_path $DST`
DST_HOST=`arg_host $DST`

DISK_ID=$(echo "$DST_PATH" | $AWK -F. '{print $NF}')

#-------------------------------------------------------------------------------
# Delete and exit if directory
#-------------------------------------------------------------------------------

IS_DISK=`is_disk $DST_PATH`

#if [ `is_disk $DST_PATH` -eq 0 ]; then
#    splog "Deleting $DST_PATH on $DST_HOST"
#    log "Deleting $DST_PATH on $DST_HOST"
#    ssh_exec_and_log "$DST_HOST" "rm -rf $DST_PATH" "Error deleting $DST_PATH"
#    exit 0
#fi

function deleteRemote()
{
    local _DST_HOST="$1" _SP_VOL="$2" _DST_PATH="$3"
#    splog "_DST_HOST=$1 _SP_VOL=$2 _DST_PATH=$3"
    DELETE_CMD=$(cat <<EOF
    set -e
    export PATH=/bin:/usr/bin:/sbin:/usr/sbin:\$PATH
    splog(){ logger -t tm_sp_${0##*/} "[deleteRemote] \$*"; }

    if [ -L "$_DST_PATH" ]; then
        splog "rm -f $_DST_PATH"
        rm -f "$_DST_PATH"
    fi

    if storpool attach list | grep -q " $_SP_VOL " &>/dev/null; then
        splog "detach volume $_SP_VOL all"
        storpool detach volume "$_SP_VOL" all
    fi

    if [ "$PERSISTENT" != "YES" ]; then
        if storpool volume "$_SP_VOL" info &>/dev/null; then
            splog "delete volume $_SP_VOL (non-persistent)"
            storpool volume "$_SP_VOL" delete "$_SP_VOL"
        fi
    fi

    splog "END DELETE_CMD"
EOF
)
    splog "run DELETE_CMD on $_DST_HOST ($_DST_PATH)"
    ssh_exec_and_log "$_DST_HOST" "$DELETE_CMD" \
                 "Error deleting $_SP_VOL in $_DST_HOST($_DST_PATH)"
    splog "_END_DELETE_CMD"
}


#-------------------------------------------------------------------------------
# Get Datastore type
#-------------------------------------------------------------------------------
XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i XPATH_ELEMENTS
while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onedatastore show -x $DS_ID| $XPATH \
                    /DATASTORE/TEMPLATE/TYPE)
unset i
DS_TYPE="${XPATH_ELEMENTS[i++]}"

if [ "$DS_TYPE" = "SYSTEM_DS" ]; then
    XPATH="${DRIVER_PATH}/../../datastore/xpath_multi.py -s"

    unset i XPATH_ELEMENTS
    while read -r element; do
        XPATH_ELEMENTS[i++]="$element"
    done < <(onevm show -x $VM_ID| $XPATH \
                           /VM/TEMPLATE/DISK/DISK_ID \
                           /VM/TEMPLATE/DISK/TYPE \
                           /VM/TEMPLATE/DISK/FORMAT \
                           /VM/TEMPLATE/DISK/TM_MAD \
                           /VM/CONTEXT/DISK_ID )
    unset i
    TDISK_ID=${XPATH_ELEMENTS[i++]}
    DISK_TYPE=${XPATH_ELEMENTS[i++]}
    DISK_FORMAT=${XPATH_ELEMENTS[i++]}
    DISK_TM=${XPATH_ELEMENTS[i++]}
    CONTEXT_DISK_ID=${XPATH_ELEMENTS[i++]}

#    splog "DISK_ID=$DISK_ID TDISK_ID=$TDISK_ID DISK_TYPE=$DISK_TYPE DISK_FORMAT=$DISK_FORMAT DISK_TM=$DISK_TM CONTEXT_DISK_ID=$CONTEXT_DISK_ID"

    OLDIFS=$IFS
    IFS=";"
    DISK_ID_ARRAY=($TDISK_ID)
    DISK_TYPE_ARRAY=($DISK_TYPE)
    DISK_FORMAT_ARRAY=($DISK_FORMAT)
    DISK_TM_ARRAY=($DISK_TM)
    IFS=$OLDIFS

    for i in ${!DISK_ID_ARRAY[@]}; do
        if [ "${DISK_TM_ARRAY[i]}" = "" ]; then
#            splog "$i ${DISK_ID_ARRAY[i]} ${DISK_TYPE_ARRAY[i]} $FORMAT ${DISK_TM_ARRAY[i]}"
            if [ $IS_DISK == 1 ] && [ "${DISK_ID_ARRAY[i]}" != "$DISK_ID" ] ; then
#                splog "skip ${DISK_ID_ARRAY[i]} != $DISK_ID"
                continue
            fi
            FORMAT=${DISK_FORMAT_ARRAY[i]}
            if [ ${DISK_TYPE_ARRAY[i]} = "swap" ]; then
                FORMAT="swap"
            fi
            deleteRemote "$DST_HOST" "one-sys-${VM_ID}-${DISK_ID_ARRAY[i]}-${FORMAT}" "$DST_PATH"
#        else
#            splog "SKIP i type:${DISK_TYPE_ARRAY[i]} format:${DISK_FORMAT_ARRAY[i]} tm:${DISK_TM_ARRAY[i]}"
        fi
    done

    if [ $IS_DISK == 0 ]; then
#        splog "delete context iso"
        deleteRemote "$DST_HOST" "one-sys-${VM_ID}-${CONTEXT_DISK_ID}-iso" "$DST_PATH"

        RM_CMD="rm -rf '$DST_PATH'"
        splog "run RM_CMD on $DST_HOST ($DST_PATH)"
        ssh_exec_and_log "$DST_HOST" "$RM_CMD" \
                 "Error deleting $SP_VOL in $DST_HOST($DST_PATH)"
    fi

    splog "END"
    exit 0
fi

#-------------------------------------------------------------------------------
# Get Image information
#-------------------------------------------------------------------------------


unset i XPATH_ELEMENTS
while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onevm show -x $VM_ID| $XPATH \
                    /VM/STATE \
                    /VM/LCM_STATE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/SOURCE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/IMAGE_ID \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/IMAGE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/CLONE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/PERSISTENT)

unset i
VMSTATE="${XPATH_ELEMENTS[i++]}"
LCM_STATE="${XPATH_ELEMENTS[i++]}"
SOURCE="${XPATH_ELEMENTS[i++]}"
IMAGE_ID="${XPATH_ELEMENTS[i++]}"
IMAGE="${XPATH_ELEMENTS[i++]}"
CLONE="${XPATH_ELEMENTS[i++]}"
PERSISTENT="${XPATH_ELEMENTS[i++]}"
splog "\
${VMSTATE:+VMSTATE=$VMSTATE }\
${LCM_STATE:+LCM_STATE=$LCM_STATE }\
${SOURCE:+SOURCE=$SOURCE }\
${IMAGE_ID:+IMAGE_ID=$IMAGE_ID }\
${CLONE:+CLONE=$CLONE }\
${PERSISTENT:+PERSISTENT=$PERSISTENT }\
${IMAGE:+IMAGE=$IMAGE }\
"

#splog "SOURCE=$SOURCE"
#onevm show -x $VM_ID 2>&1 >/tmp/tm_sp_${0##*/}-vm${VM_ID}-disk${DISK_ID}.xml

# No need to delete no cloned images
#if [ "$CLONE" = "NO" ]; then
#    splog "EXIT CLONE=$CLONE"
#    exit 0
#fi

# cloned, so the name will be "<pool>/one-<imageid>-<vmid>-<diskid>"
SP_VOL="${SOURCE##*/}"
[ -n "$PERSISTENT" ] || SP_VOL="${SP_VOL}-${VM_ID}-${DISK_ID}"

#-------------------------------------------------------------------------------
# Delete the device
#-------------------------------------------------------------------------------

log "Deleting $DST_PATH"

deleteRemote "$DST_HOST" "$SP_VOL" "$DST_PATH"

splog "END"
exit 0
