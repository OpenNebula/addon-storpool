#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015-2020, StorPool (storpool.com)                               #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#-------------------------------------------------------------------------------
# delete host:remote_system_ds/disk.i vmId datastoreId
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Get delete arguments from OpenNebula core
#-------------------------------------------------------------------------------

DST="$1"
VM_ID="$2"
DS_ID="$3"

TM_PATH="$(dirname $0)"
source "${TM_PATH}/storpool_common.sh"

splog "DST=$DST VM_ID=$VM_ID DS_ID=$DS_ID"

#-------------------------------------------------------------------------------
# Process destination
#-------------------------------------------------------------------------------

DST_PATH=`arg_path $DST`
DST_HOST=`arg_host $DST`

DISK_ID=$(echo "$DST_PATH" | $AWK -F. '{print $NF}')
IS_DISK=`is_disk $DST_PATH`

#-------------------------------------------------------------------------------
# Get Datastore information
#-------------------------------------------------------------------------------

oneDatastoreInfo "$DS_ID"

if [ "$DS_TEMPLATE_TYPE" = "SYSTEM_DS" ]; then
    TEMPLATE= #`onevm show -x "$VM_ID" | base64 -w0`
    oneTemplateInfo "$TEMPLATE"
    LCM_STATE=${_VM_LCM_STATE}
    for i in ${!DISK_ID_ARRAY[@]}; do
        if [ "${DISK_TM_MAD_ARRAY[i]}" = "" ]; then
#            splog "[SYSTEM_DS] $i id:${DISK_ID_ARRAY[i]} type:${DISK_TYPE_ARRAY[i]} format:$FORMAT tm:${DISK_TM_MAD_ARRAY[i]}"
            if [ $IS_DISK == 1 ] && [ "${DISK_ID_ARRAY[i]}" != "$DISK_ID" ] ; then
#                splog "[SYSTEM_DS] skip ${DISK_ID_ARRAY[i]} != $DISK_ID"
                continue
            fi
            FORMAT=${DISK_FORMAT_ARRAY[i]:-raw}
            if [ ${DISK_TYPE_ARRAY[i]} = "swap" ]; then
                FORMAT="swap"
            fi
            SP_VOL="${ONE_PX}-sys-${VM_ID}-${DISK_ID_ARRAY[i]}-${FORMAT}"
            storpoolVolumeDelete "$SP_VOL" "force" "snaps" "$REMOTE_BACKUP_DELETE"
            if boolTrue "VMSNAPSHOT_DELETE_ON_TERMINATE" && [ $LCM_STATE -ne 15 ]; then
                storpoolVolumeSnapshotsDelete "${SP_VOL}-${VMSNAPSHOT_TAG}-"
            fi
            RM_CMD="rm -rf '${DST_PATH}/disk.${DISK_ID_ARRAY[i]}'"
            splog "run RM_CMD on $DST_HOST (${DST_PATH}/disk.${DISK_ID_ARRAY[i]})"
            ssh_exec_and_log "$DST_HOST" "$RM_CMD" \
                "Error deleting ${DST_PATH}/disk.${DISK_ID_ARRAY[i]} on $DST_HOST"
#        else
#            splog "[SYSTEM_DS] SKIP $i type:${DISK_TYPE_ARRAY[i]} format:${DISK_FORMAT_ARRAY[i]:-raw} tm:${DISK_TM_MAD_ARRAY[i]}"
        fi
    done

    if boolTrue "IS_DISK"; then
        SP_VOL="${ONE_PX}-sys-${VM_ID}-${DISK_ID}"
#        splog "[SYSTEM_DS] delete volatile $SP_VOL"
        for SP_VOL in `storpoolVolumeStartswith "$SP_VOL"`; do
            storpoolVolumeDelete "$SP_VOL" "force" "" "$REMOTE_BACKUP_DELETE"
            if boolTrue "VMSNAPSHOT_DELETE_ON_TERMINATE"; then
                storpoolVolumeSnapshotsDelete "${SP_VOL}-${VMSNAPSHOT_TAG}-"
            fi
        done
    else
#        splog "[SYSTEM_DS] delete context iso"
        SP_VOL="${ONE_PX}-sys-${VM_ID}-${_CONTEXT_DISK_ID}-iso"
        storpoolVolumeDelete "$SP_VOL" "force" "snaps"
        if boolTrue "VMSNAPSHOT_DELETE_ON_TERMINATE" && [ $LCM_STATE -ne 15 ]; then
            storpoolVolumeSnapshotsDelete "${SP_VOL}-${VMSNAPSHOT_TAG}-"
        fi
        if boolTrue "SP_CHECKPOINT_BD"; then
            storpoolVolumeDelete "${ONE_PX}-sys-${VM_ID}-rawcheckpoint" "force"
            splog "Delete ${ONE_PX}-sys-${VM_ID}-rawcheckpoint ($?)"
        fi
    fi
    RM_CMD="rm -rf '$DST_PATH'"
    if hostReachable "$DST_HOST"; then
        splog "run RM_CMD on $DST_HOST ($DST_PATH)"
        ssh_exec_and_log "$DST_HOST" "$RM_CMD" \
              "Error deleting $SP_VOL in $DST_HOST($DST_PATH)"
    else
        splog "Host unreachable: $DS_HOST, skipping $RM_CMD"
    fi

    splog "END $VM_ID [SYSTEM_DS]"
    exit 0
fi

#-------------------------------------------------------------------------------
# Get Image information
#-------------------------------------------------------------------------------

oneVmInfo "$VM_ID" "$DISK_ID"

SP_VOL="${SOURCE##*/}"

if boolTrue "CLONE"; then
    SP_VOL+="-${VM_ID}-${DISK_ID}"
    log "Deleting $DST_PATH ($SP_VOL)"

    storpoolVolumeDelete "$SP_VOL" "force" "snaps" "$REMOTE_BACKUP_DELETE"
elif [ "$TYPE" = "CDROM" ]; then
    # backward compatibility
	if boolTrue "CDROM_BACKWARD_COMPATIBILITY"; then
        if storpoolVolumeExists "$SP_VOL"; then
            storpoolVolumeDetach "$SP_VOL" "force" "$DST_HOST" "" "$READONLY"
            storpoolVolumeTag "$SP_VOL" ""
        fi
	fi
    SP_VOL+="-${VM_ID}-${DISK_ID}"
    storpoolVolumeDelete "${SP_VOL}" "force" "snaps"
else
    log "Not CLONE $DST_PATH. Only detaching $SP_VOL"
    splog "Not CLONE $DST_PATH. Only detaching $SP_VOL"

    storpoolVolumeDetach "$SP_VOL" "force" "" "all" "$READONLY"

    storpoolVolumeTag "$SP_VOL" ""

    if boolTrue "VMSNAPSHOT_DELETE_ON_TERMINATE" && [ $LCM_STATE -ne 15 ]; then
        storpoolVolumeSnapshotsDelete "${SP_VOL}-${VMSNAPSHOT_TAG}-"
    fi
fi

RM_CMD="rm -rf '$DST_PATH'*"
if hostReachable "$DST_HOST"; then
    splog "run RM_CMD on $DST_HOST ($DST_PATH)"
    ssh_exec_and_log "$DST_HOST" "$RM_CMD" \
              "Error deleting $SP_VOL in $DST_HOST($DST_PATH)"
else
    splog "Host unreachable: $DS_HOST, skipping $RM_CMD"
fi

splog "END $VM_ID"
exit 0
