#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015-2020, StorPool (storpool.com)                               #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

#-------------------------------------------------------------------------------
# snap_revert  host:parent_image snap_id vm_id ds_id
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Get snap_revert arguments from OpenNebula core
#-------------------------------------------------------------------------------

SRC="$1"
SNAP_ID="$2"
VM_ID="$3"
DS_ID="$4"

TM_PATH="$(dirname $0)"
source "${TM_PATH}/storpool_common.sh"

splog "SRC=$SRC SNAP_ID=$SNAP_ID VM_ID=$VM_ID DS_ID=$DS_ID"

SRC_HOST=`arg_host $SRC`
SRC_PATH=`arg_path $SRC`

DISK_ID=$(echo ${SRC##*/} | awk -F. '{print $NF}')

#-------------------------------------------------------------------------------
# Get Datastore information
#-------------------------------------------------------------------------------

oneDatastoreInfo "$DS_ID"

#-------------------------------------------------------------------------------
# Get Image information
#-------------------------------------------------------------------------------

oneVmInfo "$VM_ID" "$DISK_ID"

#-------------------------------------------------------------------------------
# Compute the source image
#-------------------------------------------------------------------------------

SP_VOL=${SOURCE##*/}
if boolTrue "CLONE"; then
    SP_VOL+="-${VM_ID}-${DISK_ID}"
fi

SP_SNAP="${SP_VOL}-snap${SNAP_ID}"
DST_HOST=$SRC_HOST
DST_PATH="$SRC_PATH"
SP_LINK="/dev/storpool/$SP_VOL"

#-------------------------------------------------------------------------------
# Revert snapshot
#-------------------------------------------------------------------------------

storpoolVolumeDetach "$SP_VOL" "force" "$SRC_HOST" "all"

trapAdd "storpoolVolumeAttach \"$SP_VOL\" \"$SRC_HOST\""
trapAdd "oneSymlink \"$SRC_HOST\" \"$SP_LINK\" \"$SRC_PATH\""

storpoolVolumeInfo "$SP_VOL"
OLD_SIZE_M=$((V_SIZE/1024/1024))

storpoolSnapshotRevert "$SP_SNAP" "$SP_VOL" "$V_TEMPLATE_NAME"

storpoolVolumeInfo "$SP_VOL"
NEW_SIZE_M=$((V_SIZE/1024/1024))

if [ $OLD_SIZE_M -ne $NEW_SIZE_M ]; then
    if boolTrue "UPDATE_ONE_DISK_SIZE"; then
        oneVmVolumes "$VM_ID"
        declare -A vmVolumesMap
        for disk in $vmDisksMap; do
            vmVolumesMap["${disk%:*}"]="${disk##*:}"
        done
        if [ -n "${vmVolumesMap["$SP_VOL"]}" ]; then
            DISK_ID="${vmVolumesMap[$SP_VOL]}"
            onedb change-body vm --id $VM_ID "/VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/SIZE" $NEW_SIZE_M
            splog "onedb change VM_ID:$VM_ID DISK_ID:$DISK_ID SIZE:$NEW_SIZE_M (OLD_SIZE:$OLD_SIZE_M)($?)"
        else
            splog "vmVolumesMap[$volume] not found"
        fi
    elif [ $OLD_SIZE_M -gt $NEW_SIZE_M ]; then
        splog "VM volume is +$((OLD_SIZE_M - NEW_SIZE_M))MB than snapshot. Inflating..."
        storpoolVolumeResize "$SP_VOL" "$OLD_SIZE_M"M
    fi
else
    splog "Volume size not changed (${NEW_SIZE_M}M)"
fi

storpoolVolumeAttach "$SP_VOL" "$SRC_HOST"
oneSymlink "$SRC_HOST" "$SP_LINK" "$SRC_PATH"
trapReset

splog "END $VM_ID"
exit 0
